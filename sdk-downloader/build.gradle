import dependencies.*
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
//apply from: '../jacoco.gradle'

apply from: Deps.dependency

android {
  compileSdkVersion Version.compileSdk

  defaultConfig {
    minSdkVersion Version.minSdk
    targetSdkVersion Version.targetSdk
    versionCode 1
    versionName "1.0"

    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    javaCompileOptions {
      annotationProcessorOptions {
        arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
      }
    }
  }


  buildTypes {
    debug {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
    automationTest {
      initWith(buildTypes.debug)
      testCoverageEnabled = true
    }
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

publishing {
  publications {
    aar(MavenPublication) {
      groupId sdkDownloaderPackageName
      version = libraryVersion
      artifactId project.getName()

      // Tell maven to prepare the generated "*.aar" file for publishing
      artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
      pom.withXml {
        def dependencies = asNode().appendNode('dependencies')
        configurations.implementation.allDependencies.each {
          if (it.group != null && it.name != null && it.version != null && it.version != 'unspecified') {
            def dependencyNode = dependencies.appendNode('dependency')
            dependencyNode.appendNode('groupId', it.group)
            dependencyNode.appendNode('artifactId', it.name)
            dependencyNode.appendNode('version', it.version)
          }
        }
      }
    }
  }
}