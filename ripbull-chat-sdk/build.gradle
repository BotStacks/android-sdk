import dependencies.*

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'
//apply plugin: 'newrelic'
//apply from: '../jacoco.gradle'
apply from: Deps.dependency

android {

    defaultConfig {
        minSdkVersion Version.minSdk
        targetSdkVersion Version.targetSdk
        compileSdkVersion Version.compileSdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    sourceSets {
        getByName("androidTest") {
            assets.srcDirs(files(projectDir, "schemas"))
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        automationTest {
            initWith(buildTypes.debug)
            testCoverageEnabled = true
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "default"
    productFlavors {
        stage {
            dimension "default"
            versionNameSuffix "-stage"
            buildConfigField 'String', 'BASE_URL', '"https://prov-stage.inappchat.io"'
        }
        qa {
            dimension "default"
            versionNameSuffix "-qa"
            buildConfigField 'String', 'BASE_URL', '"https://prov-qa.inappchat.io"'
        }
        prod {
            dimension "default"
            //buildConfigField 'String', 'BASE_URL', '"https://prov-stage.inappchat.io"'
            buildConfigField 'String', 'BASE_URL', '"https://prov.inappchat.io"'
        }
        dev {
            dimension "default"
            versionNameSuffix "-dev"
            buildConfigField 'String', 'BASE_URL', '"https://prov-dev.inappchat.io"'
        }
    }
    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

publishing {
    publications {
        aar(MavenPublication) {
            groupId sdkPackageName
            version = libraryVersion
            artifactId project.getName()
            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/outputs/aar/${project.getName()}-${getFlavor(project)}-release.aar")
            pom.withXml {
                def dependencies = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    if (it.group != null && it.name != null && it.version != null && it.version != 'unspecified') {
                        def dependencyNode = dependencies.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }

                // include sub-module dependencies into POM xml file
                def submoduleDependencies = new XmlParser().parse("$projectDir/sub-module-dependencies.xml")
                submoduleDependencies.dependency.each {
                    def dependencyNode = dependencies.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.groupId.text())
                    dependencyNode.appendNode('artifactId', it.artifactId.text())
                    dependencyNode.appendNode('version', it.version.text())
                }
            }
        }
    }
}
private static String getFlavor(project) {
    def flavor = 'dev'
    if (project.hasProperty('paramEnv')) {
        flavor = project.property('paramEnv')
    }
    return flavor
}
