swagger: '2.0'
info:
  version: '1.0.0'
  title: Socket Server
  description: APIs for Socket Server
  license:
    name: Pantepic
    url: 'http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT'
# host: petchstore.swagger.io
# basePath: /v2
# schemes:
# - http
paths:
  '/{version}/tenants/{tenantId}/{eRTCUserId}/group/{groupId}/invite':
    post:
      tags:
        - Group Invte
      summary: create group invitation
      description: 'Invite new participant to group'
      produces:
        - application/json
      parameters:
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant ID'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          description: 'user mongo ID'
          type: string
          required: true
        - name: groupId
          in: path
          description: 'group ID'
          type: string
          required: true
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - in: body
          name: Body
          required: true
          description: 'array of eRTCUserIds of invitees'
          schema:
            type: array
            items:
              type: string
            example: ['63c98d7dc728e2c6121d1a6d', '63d1ad3660a3a634efe40731']
      responses:
        204:
          description: 'no content'
  '/{version}/tenants/{tenantId}/{eRTCUserId}/group/{groupId}/invites/dismiss':
    post:
      tags:
        - Group Invte
      summary: dismiss group invitation
      description: 'Dissmiss group invitation'
      produces:
        - application/json
      parameters:
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant ID'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          description: 'user mongo ID'
          type: string
          required: true
        - name: groupId
          in: path
          description: 'group ID'
          type: string
          required: true
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
      responses:
        204:
          description: 'no content'
  '/{version}/tenants/{tenantId}/{eRTCUserId}/group/{groupId}/invites/accept':
    post:
      tags:
        - Group Invte
      summary: accept group invitation
      description: 'Accept group invitation'
      produces:
        - application/json
      parameters:
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant ID'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          description: 'user mongo ID'
          type: string
          required: true
        - name: groupId
          in: path
          description: 'group ID'
          type: string
          required: true
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
      responses:
        204:
          description: 'no content'
  '/{version}/tenants/{tenantId}/{eRTCUserId}/group/invites':
    get:
      tags:
        - Group Invte
      summary: get group invitation
      description: 'Get group invitations for user'
      produces:
        - application/json
      parameters:
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant ID'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          description: 'user mongo ID'
          type: string
          required: true
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
      responses:
        200:
          description: 'Group invitation data'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/getGroupInvitesByUserResponse'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
  '/{version}/tenants/{tenantId}/user/':
    post:
      tags:
        - eRTC User
      summary: Get or Update user by appUserId
      description: 'Get a user by APP Unique ID'
      operationId: GetOrUpdateUserByAppId
      produces:
        - application/json
      parameters:
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant ID'
          type: string
          required: true
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - in: body
          name: Body
          description: Unique AppID of the user to get
          required: true
          schema:
            $ref: '#/definitions/GetOrUpdateUserRequest'
      responses:
        200:
          description: 'ERTC User data'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/UserResponse'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
      security:
        - sdk_key: []
  '/{version}/tenants/{tenantId}/user/{eRTCUserId}':
    post:
      tags:
        - eRTC User
      summary: Update user by eRTC userId
      description: 'Get a user by eRTC userId'
      operationId: UpdateUserByeRTCUserId
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          description: eRTC user ID. Example '5cbdc711c25983101b1b4198'
          required: true
          type: string
        - in: body
          name: Body
          description: Unique AppID of the user to get
          required: true
          schema:
            $ref: '#/definitions/UpdateUserRequest'
      responses:
        200:
          description: 'ERTC User data'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/UserResponse'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
      security:
        - sdk_key: []
  '/{version}/tenants/{tenantId}/user/{eRTCUserId}/logout':
    post:
      tags:
        - eRTC User
      summary: Logout
      description: 'LogoutUser'
      operationId: LogoutUser
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          description: eRTC user ID. Example '5cbdc711c25983101b1b4198'
          required: true
          type: string
        - in: body
          name: Body
          description: Unique AppID of the user to get
          required: true
          schema:
            $ref: '#/definitions/LogoutUserRequest'
      responses:
        200:
          description: 'ERTC User data'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                description: 'result message'
                type: object
                properties:
                  'message':
                    description: 'message string'
                    type: string
                    example: 'User logged out successfully'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
      security:
        - sdk_key: []
  '/{version}/tenants/{tenantId}/user/{eRTCUserId}/logoutOtherDevices':
    post:
      tags:
        - eRTC User
      summary: Logout
      description: 'logoutOtherDevices'
      operationId: logoutOtherDevices
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          description: eRTC user ID. Example '5cbdc711c25983101b1b4198'
          required: true
          type: string
        - in: body
          name: Body
          description: Unique AppID of the user to get
          required: true
          schema:
            $ref: '#/definitions/LogoutUserRequest'
      responses:
        200:
          description: 'ERTC User data'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                description: 'result message'
                type: object
                properties:
                  'message':
                    description: 'message string'
                    type: string
                    example: 'Other devices logged out successfully'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
      security:
        - sdk_key: []
  '/{version}/tenants/{tenantId}/user/{eRTCUserId}/refreshToken':
    get:
      tags:
        - eRTC User
      summary: Refresh auth token
      description: 'Refresh auth token'
      operationId: RefreshAuthToken
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          description: eRTC user ID. Example '5cbdc711c25983101b1b4198'
          required: true
          type: string
      responses:
        200:
          description: 'Refreshed token'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/tokenSchema'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
      security:
        - sdk_key: []
  '/{version}/tenants/{tenantId}/user/{eRTCUserId}/blockUnblock/{action}':
    post:
      tags:
        - eRTC User
      summary: Update user by eRTC userId
      description: 'Get a user by eRTC userId'
      operationId: BlockUnblockUserPost
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenanat Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          description: eRTC user ID of caller. Example '5cbdc711c25983101b1b4198'.
          required: true
          type: string
        - name: action
          in: path
          description: 'Action. For example block/unblock.'
          required: true
          type: string
        - in: body
          name: Body
          description: Unique AppID of the user to get
          required: true
          schema:
            $ref: '#/definitions/BlockUnblockUserRequest'
      responses:
        200:
          description: 'ERTC User data'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/BlockUnblockUserResponse'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
      security:
        - sdk_key: []
  '/{version}/tenants/{tenantId}/user/{eRTCUserId}/blockedUsers':
    get:
      tags:
        - eRTC User
      summary: Get blocked users
      description: 'Get blocked users'
      operationId: BlockedUsersGet
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: deviceid
          in: header
          required: true
          type: string
          description: 'device123'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          description: eRTC user ID. Example '5cbdc711c25983101b1b4198'
          required: true
          type: string
      responses:
        200:
          description: 'Blocked user list'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/getBlockedUsersResponse'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
      security:
        - sdk_key: []
  '/{version}/tenants/{tenantId}/user/{eRTCUserId}/chatUserDetails':
    post:
      tags:
        - eRTC User
      summary: Get specific details of other chatUsers
      description: 'Get specific details of other chatUsers'
      operationId: getChatUserDetailsPost
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          description: eRTC user ID. Example '5cbdc711c25983101b1b4198'
          required: true
          type: string
        - in: body
          name: Body
          description: list of appUserIds of chatUsers
          required: true
          schema:
            $ref: '#/definitions/chatUserDetailsRequest'
      responses:
        200:
          description: 'Blocked user list'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/chatUserDetailsResponse'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
      security:
        - sdk_key: []
  '/{version}/tenants/{tenantId}/user/{eRTCUserId}/pendingEvents':
    get:
      tags:
        - eRTC User
      summary: Get pending events for particular device
      description: 'Get blocked users'
      operationId: PendingEventsGet
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          description: eRTC user ID. Example '5cbdc711c25983101b1b4198'
          required: true
          type: string
        - name: deviceId
          in: query
          description: 'source device Id'
          required: false
          type: string
      responses:
        200:
          description: 'Pending event list'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/getPendingEventsResponse'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
      security:
        - sdk_key: []
  '/{version}/tenants/{tenantId}/user/{eRTCUserId}/resetBadgeCount':
    get:
      tags:
        - eRTC User
      summary: reset notification badge count
      description: 'reset Bagde count'
      operationId: resetBadgeCount
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          description: eRTC user ID. Example '5cbdc711c25983101b1b4198'
          required: true
          type: string
      responses:
        200:
          description: 'badge updated success'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                description: 'Success string'
                type: object
                properties:
                  'message':
                    description: 'message string'
                    type: string
                    example: 'badge counter reset successfully'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
      security:
        - sdk_key: []
  '/{version}/tenants/{tenantId}/{eRTCUserId}/draft/':
    post:
      tags:
        - Draft
      summary: Draft API
      description: 'Send chat over a thread'
      operationId: DraftUpdate
      produces:
        - application/json
      consumes:
        - multipart/form-data
      parameters:
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: deviceid
          in: header
          required: true
          type: string
          description: 'Source device ID'
        - name: threadId
          in: formData
          description: 'Thread ID which represents a user or a group. eg. 5c56c9a2218aec4b4a8a976f. This is exclusive peer to recipientAppUserId.'
          required: false
          type: string
        - name: recipientAppUserId
          in: formData
          description: 'App user Id of receiver. eg. abc@def.com. This is exclusive peer to threadId.'
          required: false
          type: string
        - name: sendereRTCUserId
          in: formData
          description: 'eRTC user Id of sender. eg. 5c56c9a2218aec4b4a8a976e'
          required: true
          type: string
        - name: message
          in: formData
          description: "message text. rg. 'hello'"
          required: false
          type: string
        - name: msgType
          description: 'message type. Required only for text/contact/location message. Other supported values are gif/sticker'
          in: formData
          type: string
          required: false
        - name: file
          in: formData
          description: 'Media chat file'
          required: false
          type: file
        - name: metadata
          in: formData
          description: 'JSON object which can be used for client reference in request/response context. Server will not do any processing on this object. eg. { "abc" : "def" }'
          type: string
        - name: location
          in: formData
          description: 'JSON object of location. check locationSchema below'
          required: false
          type: string
        - name: contact
          in: formData
          description: 'JSON object of contact. check contactSchema below'
          required: false
          type: string
        - name: gify
          in: formData
          description: 'gify url'
          required: false
          type: string
        - name: mentions
          in: formData
          description: 'User mentions list. Please check mentionsSchemaChatRequest below. For example, [{"type":"user","value":"5c56c9a2218aec4b4a8a976f"}, {"type":"generic","value":"channel"]'
          required: false
          type: string
        - name: media
          in: formData
          description: 'This is only allowed in forward messages. i.e. if forwardChatFeatureData exists. JSON object of Details in-case it is a forward chat. eg.{"path" : "file/chat/5eef7e13df287e0ebaac34b35eef97669c612ed1ca595314_1598610192772.jpeg","name" : "WhatsApp Image 2020-08-25 at 2.36.35 PM.jpeg","thumbnail" : "file/imageThumbnail/chat/5eef7e13df287e0ebaac34b35eef97669c612ed1ca595314_1598610192772.jpeg"}. Please check mediaSchema in models'
          required: false
          type: string
        - name: msgCorrelationId
          in: formData
          description: 'Client generated unique identifier used to trace message delivery till receiver'
          required: false
          type: string
        - name: senderTimeStampMs
          in: formData
          description: 'epoch timestamp (in ms) of message creation generated on sender device'
          required: true
          type: number
        - name: customData
          in: formData
          description: 'JSON object which can be used for customer specific data which is not supported in InAppChat chat model. eg. { "abc" : "def" }'
          type: string
      responses:
        200:
          description: 'ERTC User data'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/draftResponse'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
      security:
        - sdk_key: []
    get:
      tags:
        - Draft
      summary: Draft API
      description: 'Send chat over a thread'
      operationId: GetDrafts
      produces:
        - application/json
      parameters:
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: deviceid
          in: header
          required: true
          type: string
          description: 'Source device ID'
        - name: threadId
          in: query
          description: 'Get draft for a particular thread'
          required: false
          type: string
        - name: baseMsgUniqueId
          in: query
          description: 'Get thread for a reply thread, this is base message id'
          required: false
          type: string
      responses:
        200:
          description: 'ERTC User data'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/draftResponse'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
      security:
        - sdk_key: []
  '/{version}/tenants/{tenantId}/{eRTCUserId}/chat/':
    post:
      tags:
        - Chat
      summary: Chat API
      description: 'Send chat over a thread'
      operationId: Chat
      produces:
        - application/json
      consumes:
        - multipart/form-data
      parameters:
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: deviceid
          in: header
          required: true
          type: string
          description: 'Source device ID'
        - name: threadId
          in: formData
          description: 'Thread ID which represents a user or a group. eg. 5c56c9a2218aec4b4a8a976f. This is exclusive peer to recipientAppUserId.'
          required: false
          type: string
        - name: recipientAppUserId
          in: formData
          description: 'App user Id of receiver. eg. abc@def.com. This is exclusive peer to threadId.'
          required: false
          type: string
        - name: sendereRTCUserId
          in: formData
          description: 'eRTC user Id of sender. eg. 5c56c9a2218aec4b4a8a976e'
          required: true
          type: string
        - name: message
          in: formData
          description: "message text. rg. 'hello'"
          required: false
          type: string
        - name: msgType
          description: 'message type. Required only for text/contact/location message. Other supported values are gif/sticker'
          in: formData
          type: string
          required: false
        - name: file
          in: formData
          description: 'Media chat file'
          required: false
          type: file
        - name: replyThreadFeatureData
          in: formData
          description: 'JSON object of Details in-case it is a reply on another chat. eg. { "baseMsgUniqueId": "5e3841dea49618da0b379480", "replyMsgConfig": 1 }. Please check replyThreadSchemaChatRequest in models'
          required: false
          type: string
        - name: metadata
          in: formData
          description: 'JSON object which can be used for client reference in request/response context. Server will not do any processing on this object. eg. { "abc" : "def" }'
          type: string
        - name: location
          in: formData
          description: 'JSON object of location. check locationSchema below'
          required: false
          type: string
        - name: contact
          in: formData
          description: 'JSON object of contact. check contactSchema below'
          required: false
          type: string
        - name: gify
          in: formData
          description: 'gify url'
          required: false
          type: string
        - name: mentions
          in: formData
          description: 'User mentions list. Please check mentionsSchemaChatRequest below. For example, [{"type":"user","value":"5c56c9a2218aec4b4a8a976f"}, {"type":"generic","value":"channel"]'
          required: false
          type: string
        - name: forwardChatFeatureData
          in: formData
          description: 'JSON object of Details in-case it is a forward chat. eg. { "originalMsgUniqueId": "5e3841dea49618da0b379480", "isForwarded": true }. Please check forwardChatSchemaChatRequest in models'
          required: false
          type: string
        - name: media
          in: formData
          description: 'This is only allowed in forward messages. i.e. if forwardChatFeatureData exists. JSON object of Details in-case it is a forward chat. eg.{"path" : "file/chat/5eef7e13df287e0ebaac34b35eef97669c612ed1ca595314_1598610192772.jpeg","name" : "WhatsApp Image 2020-08-25 at 2.36.35 PM.jpeg","thumbnail" : "file/imageThumbnail/chat/5eef7e13df287e0ebaac34b35eef97669c612ed1ca595314_1598610192772.jpeg"}. Please check mediaSchema in models'
          required: false
          type: string
        - name: msgCorrelationId
          in: formData
          description: 'Client generated unique identifier used to trace message delivery till receiver'
          required: false
          type: string
        - name: senderTimeStampMs
          in: formData
          description: 'epoch timestamp (in ms) of message creation generated on sender device'
          required: true
          type: number
        - name: customData
          in: formData
          description: 'JSON object which can be used for customer specific data which is not supported in InAppChat chat model. eg. { "abc" : "def" }'
          type: string
      responses:
        200:
          description: 'ERTC User data'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/chatResponse'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
      security:
        - sdk_key: []
    delete:
      tags:
        - Chat
      summary: Delete Chat API
      description: 'Delete particular chat'
      operationId: deleteChat
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: deviceid
          in: header
          required: true
          type: string
          description: 'Source device ID'
        - in: body
          name: Body
          description: delete chat body
          required: true
          schema:
            $ref: '#/definitions/deleteChatRequestObj'
      responses:
        200:
          description: 'deleted chat msgUniqueId'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/deleteChatResponse'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
      security:
        - sdk_key: []
    put:
      tags:
        - Chat
      summary: Edit Chat API
      description: 'Edit particular chat'
      operationId: editChatPut
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: deviceid
          in: header
          required: true
          type: string
          description: 'Source device ID'
        - in: body
          name: Body
          description: delete chat body
          required: true
          schema:
            $ref: '#/definitions/editChatRequestObj'
      responses:
        200:
          description: 'deleted chat msgUniqueId'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/editChatResponse'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
      security:
        - sdk_key: []
  '/{version}/tenants/{tenantId}/{eRTCUserId}/chat/e2eEncrypted':
    post:
      tags:
        - Chat
      summary: e2e Encrypted Chat API
      description: 'Send e2e encrypted chat over a thread'
      operationId: E2eEncryptionChat
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: deviceid
          in: header
          required: true
          type: string
          description: 'Source device ID'
        - in: body
          name: Body
          description: e2e Encrypted Cha
          required: true
          schema:
            $ref: '#/definitions/e2eEncryptedChatRequestObj'
      responses:
        200:
          description: 'ERTC User data'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/chatResponse'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
      security:
        - sdk_key: []
  '/{version}/tenants/{tenantId}/{eRTCUserId}/chat/multiple':
    post:
      tags:
        - Chat
      summary: Chat API
      description: 'Send multiple text chats'
      operationId: ChatMultiplePost
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: deviceid
          in: header
          required: true
          type: string
          description: 'Source device ID'
        - name: context
          in: query
          description: 'type of sync i.e. offlineDispatch/forwardChat. default value is offlineDispatch.'
          required: false
          type: string
        - in: body
          name: Body
          description: Chat multiple request
          required: true
          schema:
            $ref: '#/definitions/chatMultipleRequest'
      responses:
        200:
          description: 'ERTC User data'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                type: object
                properties:
                  'results':
                    description: list of individual chat response
                    type: array
                    items:
                      $ref: '#/definitions/chatMultipleResponseObj'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
  '/{version}/tenants/{tenantId}/{eRTCUserId}/chat/reaction':
    post:
      tags:
        - Chat
      summary: Chat Reaction API
      description: 'Send chat reaction'
      operationId: ChatReactionPost
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: deviceid
          in: header
          required: true
          type: string
          description: 'Source device ID'
        - in: body
          name: Body
          description: Chat multiple request
          required: true
          schema:
            $ref: '#/definitions/chatReactionRequest'
      responses:
        200:
          description: 'ERTC User data'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/chatReactionObj'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
  '/{version}/tenants/{tenantId}/{eRTCUserId}/chat/search':
    post:
      tags:
        - Chat
      summary: Chat Search API
      description: 'Chat Search API'
      operationId: ChatSearchPost
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: deviceid
          in: header
          required: true
          type: string
          description: 'Source device ID'
        - name: skip
          in: query
          type: string
          description: 'skip value for pagination. i.e. index. default 0'
        - name: limit
          in: query
          type: string
          description: 'limit value for pagination. i.e. page-size. default 10'
        - in: body
          name: Body
          description: Chat multiple request
          required: true
          schema:
            $ref: '#/definitions/chatSearchRequest'
      responses:
        200:
          description: 'ERTC User data'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/chatSearchResponse'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
  '/{version}/tenants/{tenantId}/{eRTCUserId}/chat/{threadId}/history':
    get:
      description: 'Load Chat history on any conversation thread'
      summary: Load chat history
      tags:
        - Chat
      operationId: chatHistoryGet
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <userServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: threadId
          in: path
          required: true
          type: string
          description: 'Thread ID'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: msgType
          in: query
          type: string
          description: 'Msg type, stringified array Example ["text"."gif"]'
        - name: currentMsgId
          in: query
          type: string
          description: 'message Id. Example 5fabd417f9e67f996ce84140'
        - name: direction
          in: query
          type: string
          description: 'future/past'
        - name: dateFrom
          in: query
          type: string
          description: 'ISO string of start date'
        - name: dateTo
          in: query
          type: string
          description: 'ISO string of end date'
        - name: pageSize
          in: query
          type: string
          description: 'page size for pagination'
        - name: baseMsgUniqueId
          in: query
          type: string
          description: 'Base message id in-case reply thread restoration is happening. Example 6005dcbda026a25c2ce5f9b5'
        - name: deep
          in: query
          type: boolean
          description: 'When true it returns messages from threads and main window both'
      responses:
        '200':
          description: 'Thread history response'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/ChatHistoryResponseSchema'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
  '/{version}/tenants/{tenantId}/{eRTCUserId}/chat/history':
    get:
      description: 'Load Chat history on any conversation thread'
      summary: Load chat history
      tags:
        - Chat
      operationId: allChatHistoryGet
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <userServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: msgType
          in: query
          type: string
          description: 'Msg type, stringified array Example ["text"."gif"]'
        - name: currentMsgId
          in: query
          type: string
          description: 'message Id. Example 5fabd417f9e67f996ce84140'
        - name: direction
          in: query
          type: string
          description: 'future/past'
        - name: dateFrom
          in: query
          type: string
          description: 'ISO string of start date'
        - name: dateTo
          in: query
          type: string
          description: 'ISO string of end date'
        - name: pageSize
          in: query
          type: string
          description: 'page size for pagination'
        - name: baseMsgUniqueId
          in: query
          type: string
          description: 'Base message id in-case reply thread restoration is happening. Example 6005dcbda026a25c2ce5f9b5'
      responses:
        '200':
          description: 'Thread history response'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/ChatHistoryResponseSchema'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
  '/{version}/tenants/{tenantId}/{eRTCUserId}/chat/{threadId}/history/clear':
    post:
      description: 'Clear chat history'
      summary: Load chat history
      tags:
        - Chat
      operationId: clearChatHistory
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: threadId
          in: path
          required: true
          type: string
          description: 'Thread ID'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <userServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
      responses:
        '200':
          description: 'Clear chat history response'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/ChatHistoryClearSchema'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
  '/{version}/tenants/{tenantId}/{eRTCUserId}/chat/replyThread/history':
    get:
      description: 'Load Chat history on any conversation thread'
      summary: Load chat history
      tags:
        - Chat
      operationId: getReplyThreads
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <userServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: threadId
          in: query
          required: false
          type: string
          description: 'Thread ID'
        - name: follow
          in: query
          required: false
          type: boolean
          description: 'To get all threads user following, just send true'
        - name: starred
          in: query
          required: false
          type: boolean
          description: 'To get all starred messages, just send true'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: msgType
          in: query
          type: string
          description: 'Msg type, stringified array Example ["text"."gif"]'
        - name: currentMsgId
          in: query
          type: string
          description: 'message Id. Example 5fabd417f9e67f996ce84140'
        - name: direction
          in: query
          type: string
          description: 'future/past'
        - name: pageSize
          in: query
          type: string
          description: 'page size for pagination'
        - name: baseMsgUniqueId
          in: query
          type: string
          description: 'Base message id in-case reply thread restoration is happening. Example 6005dcbda026a25c2ce5f9b5'
        - name: deep
          in: query
          type: boolean
          description: 'When true it returns messages from threads and main window both'
      responses:
        '200':
          description: 'Reply thread history response'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/ReplyThreadHistoryResponseSchema'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
  '/{version}/tenants/{tenantId}/{eRTCUserId}/search':
    post:
      tags:
        - Search
      summary: Unified search API
      description: One stop for all search APIs, can be used to search files, messages or groups.
      operationId: UnifiedSearch
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: deviceid
          in: header
          required: true
          type: string
          description: 'Source device ID'
        - name: skip
          in: query
          type: string
          description: 'skip value for pagination. i.e. index. default 0'
        - name: limit
          in: query
          type: string
          description: 'limit value for pagination. i.e. page-size. default 10'
        - in: body
          name: Body
          description: Chat multiple request
          required: true
          schema:
            $ref: '#/definitions/unifiedSearchRequest'
      responses:
        200:
          description: 'ERTC User data'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/unifiedSearchResponse'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
  '/{version}/tenants/{tenantId}/{eRTCUserId}/thread/':
    post:
      tags:
        - Thread
      summary: Thread Creation API
      description: 'Get or Create Thread request before starting chat session with any user. This API is applicable for only one 2 one chat.'
      operationId: Thread
      produces:
        - application/json
      parameters:
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - in: body
          name: Body
          description: Unique AppID of the user to get
          required: true
          schema:
            $ref: '#/definitions/threadRequest'
      responses:
        200:
          description: 'Thread data'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/threadResponse'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
      security:
        - sdk_key: []
  '/{version}/tenants/{tenantId}/{eRTCUserId}/thread/{threadId}':
    post:
      tags:
        - Thread
      summary: Thread Update API
      description: 'Update any existing thread'
      operationId: ThreadUpdatePost
      produces:
        - application/json
      parameters:
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: threadId
          in: path
          required: true
          type: string
          description: 'Thread ID'
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - in: body
          name: Body
          description: Unique AppID of the user to get
          required: true
          schema:
            $ref: '#/definitions/threadUpdateRequest'
      responses:
        200:
          description: 'Thread data'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/threadResponse'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
      security:
        - sdk_key: []
    get:
      tags:
        - Thread
      summary: Thread Get API
      description: 'Get any existing thread'
      operationId: ThreadGet
      produces:
        - application/json
      parameters:
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: threadId
          in: path
          required: true
          type: string
          description: 'Thread ID'
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <chatServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
      responses:
        200:
          description: 'Thread data'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/threadResponse'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
      security:
        - sdk_key: []
  '/{version}/tenants/{tenantId}/{eRTCUserId}/thread/history':
    get:
      description: 'Load thread history'
      summary: Load thread history
      tags:
        - Thread
      operationId: threadHistoryGet
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <userServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: skip
          in: query
          type: string
          description: 'skip value for pagination. i.e. index. default 0'
        - name: limit
          in: query
          type: string
          description: 'limit value for pagination. i.e. page-size. default 10'
        - name: threadType
          in: query
          type: string
          description: "threadType in-case specific type threads are needed. supported values single/group. Don't provide this field if all threads to be returned in unified way."
      responses:
        '200':
          description: 'Thread history response'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/ThreadHistoryResponseSchema'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
  '/V2/tenants/{tenantId}/{eRTCUserId}/thread/history':
    get:
      description: 'Load thread history'
      summary: Load thread history
      tags:
        - Thread
      operationId: threadHistoryGetV2
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <userServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: skip
          in: query
          type: string
          description: 'skip value for pagination. i.e. index. default 0'
        - name: limit
          in: query
          type: string
          description: 'limit value for pagination. i.e. page-size. default 10'
        - name: threadType
          in: query
          type: string
          description: "threadType in-case specific type threads are needed. supported values single/group. Don't provide this field if all threads to be returned in unified way."
      responses:
        '200':
          description: 'Thread history response'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/ThreadHistoryV2ResponseSchema'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
  '/{version}/tenants/{tenantId}/{eRTCUserId}/group':
    post:
      description: 'Create of Update group. For profilePic use multipart/formdata and in this case stringify participants list.'
      summary: Create or Update group
      tags:
        - Group
      operationId: createOrUpdateGroupPost
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <userServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: Body
          in: body
          schema:
            $ref: '#/definitions/GroupRequest'
      responses:
        '200':
          description: 'Forgot Password Response'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/GroupSchema'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
    get:
      description: 'Filter All groups where user is participant or group is public'
      summary: Get user groups
      tags:
        - Group
      operationId: userGroupsFilter
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <userServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: keyword
          in: query
          required: false
          type: string
          description: 'Get only public or private group'
        - name: groupType
          in: query
          required: false
          enum: ['public', 'private']
          type: string
          description: 'Filter by group type'
        - name: joined
          in: query
          type: string
          required: false
          enum: ['yes', 'no']
          description: 'Get only joined/not joined groups'
      responses:
        '200':
          description: 'Get group response'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/UserGroupsResponse'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
  '/{version}/tenants}/{tenantId}/{eRTCUserId}/group/{groupId}/addParticipants':
    post:
      description: 'Add participants to group'
      summary: Add participants to group
      tags:
        - Group
      operationId: addParticipantsPost
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <userServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: groupId
          in: path
          required: true
          type: string
          description: 'Group ID'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: Body
          in: body
          schema:
            $ref: '#/definitions/AddRemoveParticipantsRequest'
      responses:
        '200':
          description: 'Forgot Password Response'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/GroupSchema'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
  '/{version}/tenants/{tenantId}/{eRTCUserId}/group/{groupId}/removeProfilePic':
    delete:
      description: Remove group profile pic
      summary: Remove group profile pic
      tags:
        - Group
      operationId: DeleteGroupProfilePic
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <userServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: groupId
          in: path
          required: true
          type: string
          description: 'Group ID'
      responses:
        '200':
          description: 'Chat User Add Update result'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'msg':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/GroupSchema'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
  '/{version}/tenants/{tenantId}/{eRTCUserId}/group/{groupId}/removeParticipants':
    post:
      description: 'Delete participants from group'
      summary: Delete participants from group
      tags:
        - Group
      operationId: removeParticipantsPost
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <userServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: groupId
          in: path
          required: true
          type: string
          description: 'Group ID'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: Body
          in: body
          schema:
            $ref: '#/definitions/AddRemoveParticipantsRequest'
      responses:
        '200':
          description: 'Forgot Password Response'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/GroupSchema'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
  '/{version}/tenants/{tenantId}/{eRTCUserId}/group/{groupId}':
    get:
      description: 'Get group by groupId'
      summary: Get group by groupId
      tags:
        - Group
      operationId: getGroupByGroupIdGet
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <userServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: groupId
          in: path
          required: true
          type: string
          description: 'Group ID'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
      responses:
        '200':
          description: 'Get group response'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/GroupSchema'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
  '/{version}/tenants/{tenantId}/{eRTCUserId}/group/{threadId}/groupByThreadId':
    get:
      description: 'Get group by threadId'
      summary: Get group by threadId
      tags:
        - Group
      operationId: getGroupByThreadIdGet
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <userServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: threadId
          in: path
          required: true
          type: string
          description: 'Thread ID received in chat object'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
      responses:
        '200':
          description: 'Get group by threadId response'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/GroupSchema'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
  '/{version}/tenants/{tenantId}/{eRTCUserId}/group/userGroups':
    get:
      description: 'Get All groups where user is participant'
      summary: Get user groups
      tags:
        - Group
      operationId: userGroupsGet
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <userServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
      responses:
        '200':
          description: 'Get group response'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/UserGroupsResponse'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
  '/{version}/tenants/{tenantId}/{eRTCUserId}/group/{groupId}/makeDismissAdmin/{action}':
    post:
      description: 'Make or Dismiss a group user as admin'
      summary: Make or Dismiss a group user as admin
      tags:
        - Group
      operationId: makeDismissAdminPost
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <userServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: groupId
          in: path
          required: true
          type: string
          description: 'Group ID'
        - name: action
          in: path
          required: true
          type: string
          description: 'Action: make/dimiss'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: Body
          in: body
          schema:
            description: 'user object'
            type: object
            properties:
              'targetAppUserId':
                description: 'appUserId of target user'
                type: string
                example: 'abc@ertc.com'
      responses:
        '200':
          description: 'Forgot Password Response'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/GroupSchema'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'

  '/{version}/tenants}/{tenantId}/{eRTCUserId}/group/{groupId}/restrictParticipants':
    post:
      tags:
        - Group
      summary: Ban or mute users
      description: 'Ban or mute users'
      operationId: restrictParticipants
      produces:
        - application/json
      parameters:
        - name: version
          in: path
          description: 'API key'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: groupId
          in: path
          required: true
          type: string
          description: 'Group ID'
        - in: body
          name: Body
          description: Unique AppID of the user to get
          required: true
          schema:
            $ref: '#/definitions/RestrictParticipantsRequest'
      responses:
        200:
          description: 'Thread data'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/threadResponse'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
  '/{version}/tenants}/{tenantId}/{eRTCUserId}/group/{groupId}/unrestrictParticipants':
    post:
      tags:
        - Group
      summary: UnBan or unmute users
      description: 'UnBan or unmute users'
      operationId: unrestrictParticipants
      produces:
        - application/json
      parameters:
        - name: version
          in: path
          description: 'API key'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: groupId
          in: path
          required: true
          type: string
          description: 'Group ID'
        - in: body
          name: Body
          description: Unique AppID of the user to get
          required: true
          schema:
            $ref: '#/definitions/UnrestrictParticipantsRequest'
      responses:
        200:
          description: 'Thread data'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/threadResponse'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'

  '/{version}/tenants/{tenantId}/fcmValidation':
    post:
      tags:
        - FCM
      summary: FCM Validation
      description: 'Endpoint to just validate FCM notification by App teams'
      operationId: FCMValidationPost
      produces:
        - application/json
      parameters:
        - name: version
          in: path
          description: 'API key'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - in: body
          name: Body
          description: Unique AppID of the user to get
          required: true
          schema:
            $ref: '#/definitions/fcmValidationRequest'
      responses:
        200:
          description: 'Thread data'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/threadResponse'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
      security:
        - sdk_key: []
  '/{version}/tenants/{tenantId}/nft-login':
    post:
      tags:
        - G2-
      summary: Posion POG NFT based Login
      description: 'This api verify auth0 token and add user to dtabase'
      operationId: NFTLoginPOST
      produces:
        - application/json
      parameters:
        - name: version
          in: path
          description: 'API versiion'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: Authorization
          in: header
          description: 'Auth0 id_token'
          type: string
          required: true
      responses:
        200:
          description: 'User data'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/NFTLoginResponseSchema'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
      security:
        - sdk_key: []
  '/{version}/tenants/{tenantId}/{eRTCUserId}/chatReports':
    post:
      description: 'Create Chat Report.'
      summary: Create Chat Report
      tags:
        - Chat Report
      operationId: createChatReportPost
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <userServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: Body
          in: body
          schema:
            $ref: '#/definitions/ChatReportCreateRequest'
      responses:
        '200':
          description: 'Create Chat Report Response'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/ChatReportCreateSchema'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
    get:
      description: 'Get Chat Report List.'
      summary: Get Chat Report List
      tags:
        - Chat Report
      operationId: getChatReportList
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <userServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: skip
          in: query
          type: string
          description: 'skip value for pagination. i.e. index. default 0'
        - name: limit
          in: query
          type: string
          description: 'limit value for pagination. i.e. page-size. default 10'
        - name: threadId
          in: query
          required: false
          type: string
          description: 'thread ID to filter chat Reports'
        - name: category
          in: query
          required: false
          type: string
          description: 'chat report category to filter chat Reports(Possible values : abuse,spam,other,inappropriate)'
        - name: status
          in: query
          required: false
          type: string
          description: 'chat report status to filter chat Reports(Possible values : new, reportConsidered, reportIgnored)'
        - name: msgType
          in: query
          required: false
          type: string
          description: 'chat report msgType to filter chat Reports(Possible values : text, image, audio, video, file, gif, location, contact, sticker, gify)'
      responses:
        '200':
          description: 'Get Chat Report List Response'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/ChatReportListSchema'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
  '/{version}/tenants/{tenantId}/{eRTCUserId}/chatReports/{chatReportId}':
    put:
      description: 'Update Chat Report.'
      summary: Update Chat Report
      tags:
        - Chat Report
      operationId: updateChatReportPut
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <userServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: chatReportId
          in: path
          required: true
          type: string
          description: 'chat Report ID'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
        - name: Body
          in: body
          schema:
            $ref: '#/definitions/ChatReportUpdateRequest'
      responses:
        '200':
          description: 'Update Chat Report Response'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/ChatReportCreateSchema'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
    get:
      description: 'Get Chat Report Details.'
      summary: Get Chat Report Details
      tags:
        - Chat Report
      operationId: getChatReportGet
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <userServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: chatReportId
          in: path
          required: true
          type: string
          description: 'chat Report ID'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
      responses:
        '200':
          description: 'Update Chat Report Response'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/ChatReportSchema'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
    delete:
      description: 'Delete Chat Report.'
      summary: Delete Chat Report
      tags:
        - Chat Report
      operationId: deleteChatReportDelete
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <userServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: chatReportId
          in: path
          required: true
          type: string
          description: 'chat Report ID'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
      responses:
        '200':
          description: 'Delete Chat Report Response'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/ChatReportDeleteSchema'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
  '/{version}/tenants/{tenantId}/{eRTCUserId}/chatReports/{chatReportId}/allowIgnore/{action}':
    put:
      description: 'Update Chat Report Action.'
      summary: Update Chat Report Action
      tags:
        - Chat Report
      operationId: updateChatReportActionPut
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <userServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 5f61c2c3fee2af1f303a16d7'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: chatReportId
          in: path
          required: true
          type: string
          description: 'chat Report ID'
        - name: action
          in: path
          required: true
          type: string
          description: 'action for report (possible values : reportConsidered,reportedIgnored)'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
      responses:
        '200':
          description: 'Update Chat Report Response'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/ChatReportActionSchema'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'
  '/{version}/tenants/{tenantId}/{eRTCUserId}/chatSettings':
    get:
      description: 'Get profanity and domain filter.'
      summary: Get chat settings that contains profanity and domain filters
      tags:
        - Chat Setting
      operationId: getChatSettings
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: 'Authorization Token'
        - name: X-Request-Signature
          in: header
          required: true
          type: string
          description: 'sha256 of <userServer apiKey>~<bundleId>~<epoch timeStamp>'
        - name: version
          in: path
          description: 'API version'
          type: string
          required: true
        - name: tenantId
          in: path
          description: 'Tenant Id. Example 60a4fc8103a6f047ca02a1df'
          type: string
          required: true
        - name: eRTCUserId
          in: path
          required: true
          type: string
          description: 'eRTC user ID'
        - name: X-nonce
          in: header
          required: true
          type: string
          description: 'epoch timestamp'
      responses:
        '200':
          description: 'Get chatSettings response'
          schema:
            type: object
            properties:
              'success':
                description: 'Success/failure'
                type: boolean
                example: true
              'message':
                description: 'Message string'
                type: string
                example: 'Success.'
              'result':
                $ref: '#/definitions/ChatSettingsSchema'
              'errorCode':
                description: 'Error code. E00000 is success case'
                type: string
                example: 'E00000'

securityDefinitions:
  sdk_key:
    type: apiKey
    name: sdkkey
    in: header
    x-testValue: []
definitions:
  mentionsSchemaChatRequest:
    title: 'Mentions list'
    type: array
    items:
      $ref: '#/definitions/mentionSchema'
  mentionSchema:
    title: 'Mention object schema'
    type: object
    properties:
      'type':
        title: 'Mention type. eg. user/generic'
        type: string
        example: user
      'value':
        title: 'Mention value based on type. for user type, eRTCUserId. for generic type, here/channel'
        type: string
        example: '5e3841dea49618da0b379480'
  followChatRequest:
    title: 'Follow chat request object schema'
    type: object
    properties:
      'msgUniqueId':
        title: 'Base Msg id you want to follow'
        type: string
        example: '607fc465fa2f7c5c36f45cec'
      'threadId':
        title: 'Chat thread id where message belongs'
        type: string
        example: '607fc465fa2f7c5c36f45ceb'
  replyThreadSchemaChatRequest:
    title: Reply thread reature details in chat request. In context of reply message
    type: object
    properties:
      'baseMsgUniqueId':
        description: 'msgUniqueId of base chat'
        type: string
        example: '5e3841dea49618da0b379480'
      'replyMsgConfig':
        description: 'Reply config which applies to reply chat. For example, bit 0 is used to decide whether to show reply on window or not.'
        type: number
        example: 1
  forwardChatSchemaChatRequest:
    title: forrward chat feature details in chat request.
    type: object
    properties:
      'originalMsgUniqueId':
        description: 'msgUniqueId of original chat'
        type: string
        example: '5e3841dea49618da0b379480'
      'isForwarded':
        description: 'to indicate if message is forwarded one or not.'
        type: boolean
        example: true
  replyThreadSchemaChatResponse:
    title: Reply thread feature details in chat response. In context of reply message.
    type: object
    properties:
      'baseMsgUniqueId':
        description: 'msgUniqueId of base chat'
        type: string
        example: '5e3841dea49618da0b379480'
  baseChatReplyThreadDataSchema:
    title: Reply thread details in context of base chat
    type: object
    properties:
      'numOfReplies':
        description: 'Number of replies on this chat'
        type: number
        example: 11
      'responderList':
        description: 'List of the responders on this chat'
        type: array
        items:
          $ref: '#/definitions/baseMsgResponderSchema'
  baseMsgResponderSchema:
    title: Reply thread responder details
    type: object
    properties:
      'eRTCUserId':
        description: 'eRTCUserId'
        type: string
        example: '5d6fe555d8549efe832ae0a4'
      'appUserId':
        description: 'appUserId'
        type: string
        example: 'abc@def.com'
  replyThreadSchemaChatReceive:
    title: Reply thread feature details in received chat
    type: object
    properties:
      'baseMsgUniqueId':
        description: 'msgUniqueId of base chat'
        type: string
        example: '5e3841dea49618da0b379480'
      'replyMsgConfig':
        description: 'Reply config which applies to reply chat. For example, bit 0 is used to decide whether to show reply on window or not.'
        type: number
        example: 1
  forwardChatSchemaChatReceive:
    title: Forward chat feature details in received chat
    type: object
    properties:
      'originalMsgUniqueId':
        description: 'msgUniqueId of original chat'
        type: string
        example: '5e3841dea49618da0b379480'
      'isForwarded':
        description: 'to indicate if message is forwarded one or not.'
        type: boolean
        example: true
  baseMsgInReplyThreadData:
    title: base chat in response and receiver objects
    type: object
    properties:
      'msgUniqueId':
        description: 'msgUniqueId of base chat'
        type: string
        example: '5e3841dea49618da0b379480'
      'replyThreadData':
        $ref: '#/definitions/baseChatReplyThreadDataSchema'
  getBlockedUsersResponse:
    title: Get blocked users response.
    type: object
    properties:
      'blockedUsers':
        description: 'Blocked user list'
        type: array
        items:
          description: 'user object'
          type: object
          properties:
            'appUserId':
              description: 'appUserId of user'
              type: string
              example: 'abc@ertc.com'
            'eRTCUserId':
              description: 'eRTC user ID of user'
              type: string
              example: '5d344196b9801e6d0b110486'
            'tenantId':
              description: 'Project tenant ID'
              type: string
              example: '5d173fe444ead81c2aeb6363'
  getPendingEventsResponse:
    title: Get pending events response.
    type: object
    properties:
      'pendingEvents':
        description: 'Pending event list. This is optional.'
        type: array
        items:
          description: 'Pending event. Treat event entry similar to FCM event itself'
          type: object
          properties:
            'data':
              description: 'event data'
              type: object
              properties:
                'eventType':
                  description: 'FCM event type'
                  type: string
                  example: 'userSelfUpdate'
                'message':
                  description: 'Stringigied event message object'
                  type: string
                  example: '{\"eRTCUserId\":\"5eef97669c612ed1ca595314\",\"eventList\":[{\"eventType\":\"notificationSettingsChangedGlobal\",\"eventData\":{\"notificationSettings\":{\"allowFrom\":\"all\"}}}]}'
  BlockUnblockUserRequest:
    title: Block or Unblock user.
    type: object
    properties:
      'appUserId':
        description: 'appUserId of user'
        type: string
        example: 'abc@ertc.com'
  chatUserDetailsRequest:
    title: Get chatUser status details.
    type: object
    properties:
      'statusKeys':
        description: 'list of status keys needed in response. Must contain atleast one item.'
        type: array
        items:
          description: 'status key. For example, availabilityStatus, blockedStatus.'
          type: string
          example: 'availabilityStatus'
      'appUserIds':
        description: 'appUserId list of chatUsers'
        type: array
        items:
          description: 'appUserId'
          type: string
          example: 'abc@ertc.com'
  BlockUnblockUserResponse:
    title: Block or Unblock user response
    type: object
    properties:
      'message':
        description: 'Success message'
        type: string
        example: 'User unblocked successfully.'
  chatUserDetailsResponse:
    title: Get chatUser status details response
    type: object
    properties:
      'chatUserDetails':
        description: 'List of chatUser details'
        type: array
        items:
          $ref: '#/definitions/chatUserDetailsSchema'
  chatUserDetailsSchema:
    description: 'individual chatUser details'
    type: object
    properties:
      'appUserId':
        description: 'appUserId of user'
        type: string
        example: 'abc@ertc.com'
      'eRTCUserId':
        description: 'eRTC user ID of user'
        type: string
        example: '5d344196b9801e6d0b110486'
      'statusDetails':
        description: 'Status values'
        type: object
        properties:
          'availabilityStatus':
            description: 'Availability status i.e. online/away/invisible/dnd'
            type: string
            example: 'online'
          'blockedStatus':
            description: 'blocked status i.e. blocked. if this field does not, means unblocked'
            type: string
            example: 'blocked'
  NFTLoginResponseSchema:
    description: 'individual chatUser details'
    type: object
    properties:
      'id':
        description: 'unique id of user'
        type: string
      'appUserId':
        description: 'appUserId of user'
        type: string
        example: 'abc@ertc.com'
      'appState':
        description: 'active, inactive, or deleted'
        type: string
      'eRTCUserId':
        description: 'eRTC user ID of user'
        type: string
        example: '5d344196b9801e6d0b110486'
      'profilePic':
        description: 'Url for profile picture'
        type: string
      'profileStatus':
        description: 'user status'
        type: string
      'profilePicThumb':
        description: 'user profile picture thumbnail url'
        type: string
      'loginTimeStamp':
        description: 'last login time stamp'
        type: number
        example:
      'statusDetails':
        description: 'Status values'
        type: object
        properties:
          'availabilityStatus':
            description: 'Availability status i.e. online/away/invisible/dnd'
            type: string
            example: 'online'
          'blockedStatus':
            description: 'blocked status i.e. blocked. if this field does not, means unblocked'
            type: string
            example: 'blocked'
  AddRemoveParticipantsRequest:
    title: Add or Remove participants request.
    type: object
    properties:
      'participants':
        description: 'List of participants'
        type: array
        items:
          type: string
          example: 'abc@ertc.com'
  GroupRequest:
    title: Create or Update Group
    type: object
    properties:
      'name':
        description: 'Group Name'
        type: string
        example: 'ABC'
      'groupType':
        description: 'Type of group. for example privte/public. only private is supported as of now.'
        type: string
        example: 'private'
      'description':
        description: 'Description of group. Optional. Min length 2.'
        type: string
        example: 'This is ABC'
      'participants':
        description: 'List of participants'
        type: array
        items:
          type: string
          example: 'abc@ertc.com'
  GroupSchema:
    title: Group object
    type: object
    properties:
      'groupId':
        description: 'Group ID'
        type: string
        example: '5d39f5990e7b2ea2a09592c6'
      'name':
        description: 'Group Name'
        type: string
        example: 'ABC'
      'groupType':
        description: 'Type of group. for example privte/public. only private is supported as of now.'
        type: string
        example: 'private'
      'description':
        description: 'Description of group'
        type: string
        example: 'This is ABC'
      'profilePic':
        description: 'Profile pic url. use chatServer URL as prefix to generate complete URL '
        type: string
        example: 'file/group/5d173fe444ead81c2aeb63635d3bebccafbd87f2ac80ff22_1564208076389.jpg'
      'profilePicThumb':
        description: 'Profile pic thumbnail url. use chatServer URL as prefix to generate complete URL '
        type: string
        example: 'file/imageThumbnail/group/5d173fe444ead81c2aeb63635d3bebccafbd87f2ac80ff22_1564208076389.jpg'
      'createdAt':
        description: 'Group creation epoch timeStamp'
        type: number
        example: 1564079514
      'creatorId':
        description: 'appUserId of creator'
        type: string
        example: 'abc@ertc.com'
      'threadId':
        description: 'ThreadId associated with group. To be used for chat'
        type: string
        example: '5d3bebccafbd87f2ac80ff24'
      'tenantId':
        description: 'Tenant ID'
        type: string
        example: '5d173fe444ead81c2aeb6363'
      'participants':
        description: 'List of participants'
        type: array
        items:
          $ref: '#/definitions/GroupParticipantSchema'
  UserGroupsResponse:
    title: User Groups Response
    type: object
    properties:
      'groups':
        description: 'Group list list'
        type: array
        items:
          $ref: '#/definitions/GroupHighLevelDetails'
  GroupHighLevelDetails:
    description: 'Group high level details'
    type: object
    properties:
      'groupId':
        description: 'Group ID'
        type: string
        example: '5d39f5990e7b2ea2a09592c6'
      'name':
        description: 'Group Name'
        type: string
        example: 'ABC'
      'groupType':
        description: 'Type of group. for example privte/public. only private is supported as of now.'
        type: string
        example: 'private'
      'profilePic':
        description: 'Profile pic url. use chatServer URL as prefix to generate complete URL '
        type: string
        example: 'file/group/5d173fe444ead81c2aeb63635d3bebccafbd87f2ac80ff22_1564208076389.jpg'
      'profilePicThumb':
        description: 'Profile pic thumbnail url. use chatServer URL as prefix to generate complete URL '
        type: string
        example: 'file/imageThumbnail/group/5d173fe444ead81c2aeb63635d3bebccafbd87f2ac80ff22_1564208076389.jpg'
      'threadId':
        description: 'ThreadId associated with group. To be used for chat'
        type: string
        example: '5d3bebccafbd87f2ac80ff24'
      'customConfig':
        description: 'ThreadId associated with group. To be used for chat'
        type: object
      'freeze':
        description: 'Tells group frozen state'
        type: object
        properties:
          'enabled':
            description: 'True means frozen'
            type: boolean
            example: false

  GroupParticipantSchema:
    title: Group participan schema
    type: object
    properties:
      'appUserId':
        description: 'appUserId of user'
        type: string
        example: 'abc@ertc.com'
      'eRTCUserId':
        description: 'eRTC user ID of user'
        type: string
        example: '5d344196b9801e6d0b110486'
      'role':
        description: 'Role of participant. For example user/admin'
        type: string
        example: 'user'
      'joinedAtDate':
        description: 'Time when user joined'
        type: string
        example: '2019-07-25T18:31:53.813Z'
  tokenSchema:
    title: Auth token Schema
    type: object
    properties:
      'accessToken':
        description: 'Access token to be provided in all API calls'
        type: string
        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1ZDI3OGU2ZTAyNTQ1NmY4Nzg0ODA4OWIiLCJzY29wZXMiOlsiY2hhdCJdLCJyb2xlcyI6WyJ1c2VyIl0sImlhdCI6MTU2Mjg3NDA0OSwiZXhwIjoxNTYyODc0OTQ5fQ.rWEDuvy-Ghsk-8jWJsegDgKLw7hAwQE820rC1MTSsAw'
      'refreshToken':
        description: 'Refresh token'
        type: string
        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1ZDI3OGU2ZTAyNTQ1NmY4Nzg0ODA4OWIiLCJzY29wZXMiOlsiY2hhdCJdLCJyb2xlcyI6WyJ1c2VyIl0sImlhdCI6MTU2Mjg3NDA0OSwiZXhwIjoxNTY0MTcwMDQ5fQ.Mr-NrWiZFno9489PQcm2s3KwvycPewgdb4pLB4WLbhQ'
      'expiresIn':
        description: 'The interval in seconds over which token is valid'
        type: number
        example: 900
  UserResponse:
    title: User Data
    type: object
    properties:
      'eRTCUserId':
        description: 'ERTCID of User'
        type: string
        example: '5c26b3c98d4443ed1eeeed96'
      'appUserId':
        description: 'User ID i.e. abc@def.com'
        type: string
        example: 'abc@ertc.com'
      'tenantId':
        description: 'Tenant ID'
        type: string
        example: '57964c1a2014c4544afb8efe'
      'name':
        description: 'Name of user'
        type: string
        example: 'John'
      'e2eEncryptionKeys':
        $ref: '#/definitions/e2eEncryptionKeyList'
      'token':
        $ref: '#/definitions/tokenSchema'
  e2eEncryptionKeyList:
    description: 'List of e2e public keys of user on different devices. ONLY APPLICABLE IF E2E EENCRYPTION IS ENABLED FOR TENANT'
    type: array
    items:
      $ref: '#/definitions/e2eKeyObj'
  e2eKeyObj:
    title: Key object for end to end encryption
    type: object
    properties:
      'keyId':
        description: 'Key identifier.'
        type: string
        example: '5dd1732e27eda6253f15629b'
      'deviceId':
        description: 'Device identifier.'
        type: string
        example: '2b6f0cc904d137be2e1730235f5664094b831186'
      'publicKey':
        description: 'public Key of associated device'
        type: string
        example: 'CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1'
      'eRTCUserId':
        description: 'user eRTCUserId.'
        type: string
        example: '5d344196b9801e6d0b110486'
  e2eKeyObjWithReturnCodee:
    title: Key object with return code for end to end encryption
    type: object
    properties:
      'keyId':
        description: 'Key identifier.'
        type: string
        example: '5dd1732e27eda6253f15629b'
      'deviceId':
        description: 'Device identifier.'
        type: string
        example: '2b6f0cc904d137be2e1730235f5664094b831186'
      'publicKey':
        description: 'public Key of associated device'
        type: string
        example: 'CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1'
      'eRTCUserId':
        description: 'user eRTCUserId.'
        type: string
        example: '5d344196b9801e6d0b110486'
      'returnCode':
        description: 'Return code associated with individual key object. It can be receiverKeyNotActive / receiverKeyInvalid / receiverNewDeviceKeyAvailable'
        type: string
        example: 'receiverKeyNotActive'
  encryptedChatObj:
    title: Chat object for end to end encryption
    type: object
    properties:
      'keyId':
        description: 'Key identifier.'
        type: string
        example: '5dd1732e27eda6253f15629b'
      'deviceId':
        description: 'Device identifier.'
        type: string
        example: '2b6f0cc904d137be2e1730235f5664094b831186'
      'publicKey':
        description: 'public Key of associated device'
        type: string
        example: 'CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1'
      'eRTCUserId':
        description: 'user eRTCUserId.'
        type: string
        example: '5d344196b9801e6d0b110486'
      'message':
        description: 'encrypted message text. it can be present for any msgType value'
        type: string
        example: 'djk%342#@4'
      'contact':
        description: 'encrypted stringified contact object. please check contactSchema for object value'
        type: string
        example: 'djk%342#@4'
      'location':
        description: 'encrypted stringified location object. please check contactSchema for object value'
        type: string
        example: 'djk%342#@4'
      'gify':
        description: 'gify URL'
        type: string
        example: 'https://gify.com/test.gif'
      'path':
        description: 'encrypted media path URL'
        type: string
        example: 'djk%342#@4'
      'thumbnail':
        description: 'encrypted media thumbnail URL'
        type: string
        example: 'djk%342#@4'
  GetOrUpdateUserRequest:
    title: Get Or Add User Request
    type: object
    properties:
      'appUserId':
        description: 'User ID i.e. abc@def.com. Required. version=1:N'
        type: string
        example: 'abc@ertc.com'
      'deviceId':
        description: 'Unique device id. For example, UDID for ios. version=1:N'
        type: string
        example: '2b6f0cc904d137be2e1730235f5664094b831186'
      'deviceType':
        description: 'Type of device i.e. android or ios. Allowed valies android/ios. version=1:N'
        type: string
        example: 'android'
      'fcmToken':
        description: 'FCM regsitration token. Optional. version=1:N'
        type: string
        example: 'bk3RNwTe3H0:CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1'
      'fcmVersion':
        description: 'FCM Version. Optional. default value is f1. version=1:N'
        type: string
        example: 'f2'
      'publicKey':
        description: 'public key for end to end encryption. version=1:N'
        type: string
        example: 'CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1'
      'muteSetting':
        description: 'Mute setting parameter. supported values - none / all / allbutmentions. version=1:N'
        type: string
        example: 'CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1'
      'authPayload':
        $ref: '#/definitions/userAuthPayload'
  userAuthPayload:
    title: 'User Auth payload object for validation. Version 2:N'
    type: object
    properties:
      'data':
        title: 'User Auth payload data. Version 2:N'
        type: object
        properties:
          params:
            title: 'params in Auth Payload. optional. fields depends on chatUserValidation.requestData.params in tenant detaails object. Version 2:N'
            type: object
          header:
            title: 'header in Auth Payload. optional. fields depends on chatUserValidation.requestData.header in tenant detaails object. Version 2:N.'
            type: object
          body:
            title: 'header in Auth Payload. optional. fields depends on chatUserValidation.requestData.body in tenant detaails object. Version 2:N.'
            type: object
          query:
            title: 'query in Auth Payload. optional. fields depends on chatUserValidation.requestData.query in tenant detaails object. Version 2:N.'
            type: object
  UpdateUserRequest:
    title: Logout user request
    type: object
    properties:
      'deviceId':
        description: 'Unique device id. For example, UDID for ios'
        type: string
        example: '2b6f0cc904d137be2e1730235f5664094b831186'
      'deviceType':
        description: 'Type of device i.e. android or ios. Allowed valies android/ios'
        type: string
        example: 'android'
      'fcmToken':
        description: 'FCM regsitration token. Optional.'
        type: string
        example: 'bk3RNwTe3H0:CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1'
      'fcmVersion':
        description: 'FCM Version. Optional. default value is f1'
        type: string
        example: 'f2'
      'availabilityStatus':
        description: 'availability status to be over-riden on top of default behaviour. i.e. auto/away/invisible/dnd'
        type: string
        example: 'invisible'
      'notificationSettings':
        $ref: '#/definitions/notificationSettings'
  LogoutUserRequest:
    title: Logout user request
    type: object
    properties:
      'appUserId':
        description: 'User ID i.e. abc@def.com. Required.'
        type: string
        example: 'abc@ertc.com'
      'deviceId':
        description: 'Unique device id. For example, UDID for ios'
        type: string
        example: '2b6f0cc904d137be2e1730235f5664094b831186'
  chatRequestObj:
    title: Chat request object
    type: object
    properties:
      'threadId':
        description: 'Thread Id. This is exclusive peer to recipientAppUserId.'
        type: string
        example: '5c5dcfec2ac43bc9626fb9eb'
      'recipientAppUserId':
        description: 'App user Id of receiver. This is exclusive peer to threadId.'
        type: string
        example: 'abc@def.com'
      'sendereRTCUserId':
        description: 'eRTC user id of source user'
        type: string
        example: '5c56c9a2218aec4b4a8a976f'
      'message':
        description: 'message text'
        type: string
        example: 'hello'
      'msgType':
        description: 'message type. it can be text/contact/location/gify'
        type: string
        example: 'text'
      'contact':
        $ref: '#/definitions/contactSchema'
      'location':
        $ref: '#/definitions/locationSchema'
      'gify':
        description: 'gify URL'
        type: string
        example: 'https://gify.com/test.gif'
      'metadata':
        description: 'JSON object which can be used for client reference in request/response context. Server will not do any processing on this object. eg. { "abc" : "def" }'
        type: object
      'replyThreadFeatureData':
        $ref: '#/definitions/replyThreadSchemaChatRequest'
      'forwardChatFeatureData':
        $ref: '#/definitions/forwardChatSchemaChatRequest'
      'mentions':
        $ref: '#/definitions/mentionsSchemaChatRequest'
      'msgCorrelationId':
        description: 'Client generated unique identifier used to trace message delivery till receiver.'
        type: string
        example: 'I-am-unique-id'
      'senderTimeStampMs':
        description: 'epoch timestamp (in ms) of message creation generated on sender device'
        type: number
        example: 1601660022564
      'customData':
        description: 'JSON object which can be used for customer specific data which is not supported in InAppChat chat model. eg. { "abc" : "def" }'
        type: object
        example: { 'abc': 'def' }
  e2eEncryptedChatRequestObj:
    title: e2e encrypted Chat request object
    type: object
    properties:
      'threadId':
        description: 'Thread Id. This is exclusive peer to recipientAppUserId.'
        type: string
        example: '5c5dcfec2ac43bc9626fb9eb'
      'recipientAppUserId':
        description: 'App user Id of receiver. This is exclusive peer to threadId.'
        type: string
        example: 'abc@def.com'
      'sendereRTCUserId':
        description: 'eRTC user id of source user'
        type: string
        example: '5c56c9a2218aec4b4a8a976f'
      'msgType':
        description: 'message type. it can be text/image/audio/video/gif/file'
        type: string
        example: 'text'
      'metadata':
        description: 'JSON object which can be used for client reference in request/response context. Server will not do any processing on this object. eg. { "abc" : "def" }'
        type: object
      'encryptedChatList':
        description: 'List of user+device wise eencrypted chat objects.'
        type: array
        items:
          $ref: '#/definitions/encryptedChatObj'
      'senderKeyDetails':
        description: 'Sender key details used for this chat.'
        type: object
        properties:
          'keyId':
            description: 'Key identifier. This is optional. If it is not provided, means this publice key needs to be registerd.'
            type: string
            example: '5dd1732e27eda6253f15629b'
          'deviceId':
            description: 'Device identifier.'
            type: string
            example: '2b6f0cc904d137be2e1730235f5664094b831186'
          'publicKey':
            description: 'public Key of associated device'
            type: string
            example: 'CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1'
      'replyThreadFeatureData':
        $ref: '#/definitions/replyThreadSchemaChatRequest'
      'forwardChatFeatureData':
        $ref: '#/definitions/forwardChatSchemaChatRequest'
      'media':
        $ref: '#/definitions/mediaSchema'
      'mentions':
        $ref: '#/definitions/mentionsSchemaChatRequest'
      'msgCorrelationId':
        description: 'Client generated unique identifier used to trace message delivery till receiver.'
        type: string
        example: 'I-am-unique-id'
      'senderTimeStampMs':
        description: 'epoch timestamp (in ms) of message creation generated on sender device'
        type: number
        example: 1601660022564
      'customData':
        description: 'JSON object which can be used for customer specific data which is not supported in InAppChat chat model. eg. { "abc" : "def" }'
        type: object
        example: { 'abc': 'def' }
  chatObjIndeleteChatResponse:
    title: chat object in delete Chat request object
    type: object
    properties:
      'msgUniqueId':
        description: 'message unique ID'
        type: string
        example: '5c5dcfec2ac43bc9626fb9eb'
      'message':
        description: 'Modified message string. Applicable for only edit chat.'
        type: string
        example: 'ABCD'
      'replyThreadFeatureData':
        $ref: '#/definitions/replyThreadSchemaChatRequest'
  chatObjIndeleteChatRequest:
    title: chat object in delete Chat request object
    type: object
    properties:
      'msgUniqueId':
        description: 'message unique ID'
        type: string
        example: '5c5dcfec2ac43bc9626fb9eb'
  deleteChatRequestObj:
    title: delete Chat request object
    type: object
    properties:
      'chats':
        description: 'List of chat objects to be deleted. Required.'
        type: array
        items:
          $ref: '#/definitions/chatObjIndeleteChatRequest'
      'threadId':
        description: 'Thread Id. Required.'
        type: string
        example: '5c5dcfec2ac43bc9626fb9eb'
      'deleteType':
        description: 'type of delete. supported values: self/everyone. Required.'
        type: string
        example: 'everyone'
      'msgCorrelationId':
        description: 'Client generated unique identifier used to trace message delivery till receiver.'
        type: string
        example: 'I-am-unique-id'
  editChatRequestObj:
    title: edit Chat request object
    type: object
    properties:
      'msgUniqueId':
        description: 'Chat unique Identifier'
        type: string
        example: '5ede69893c2954edcfa0b5f7'
      'threadId':
        description: 'Thread Id. Required.'
        type: string
        example: '5c5dcfec2ac43bc9626fb9eb'
      'message':
        description: 'message text. it can be present for any msgType value'
        type: string
        example: 'hello123'
      'isStarred':
        description: 'If message is starred'
        type: boolean
        example: true
      'follow':
        description: 'Follow/unfollow thread'
        type: boolean
        example: true
  deleteChatResponse:
    title: delete Chat Response object
    type: object
    properties:
      'chats':
        description: 'List of deleted chats'
        type: array
        items:
          $ref: '#/definitions/chatObjIndeleteChatResponse'
  editChatResponse:
    title: edit Chat Response object
    type: object
    properties:
      'chat':
        description: 'List of deleted chats'
        type: object
        properties:
          'msgUniqueId':
            description: 'Chat unique Identifier'
            type: string
            example: '5ede69893c2954edcfa0b5f7'
          'message':
            description: 'message text. it can be present for any msgType value'
            type: string
            example: 'hello123'
          'isStarred':
            description: 'If message is starred'
            type: boolean
            example: true
          'replyThreadFeatureData':
            $ref: '#/definitions/replyThreadSchemaChatRequest'
  chatMultipleRequest:
    title: 'Request for multiple chat'
    type: array
    items:
      $ref: '#/definitions/chatRequestObj'
  chatMultipleResponseObj:
    title: Chat Multiple API response obj
    type: object
    properties:
      'success':
        description: 'Success/failure'
        type: boolean
        example: true
      'message':
        description: 'Message string'
        type: string
        example: 'Success.'
      'result':
        $ref: '#/definitions/chatResponse'
      'errorCode':
        description: 'Error code. E00000 is success case'
        type: string
        example: 'E00000'
  chatReactionRequest:
    title: Chat Reaction API Request obj
    type: object
    properties:
      'msgUniqueId':
        description: 'Chat unique Identifier'
        type: string
        example: '5ede69893c2954edcfa0b5f7'
      'emojiCode':
        description: 'Emoje code string'
        type: string
        example: 'abc'
      'action':
        description: 'Reaction actionType. It can be set/clear'
        type: string
        example: 'set'
      'msgCorrelationId':
        description: 'Client generated unique identifier used to trace message delivery till receiver.'
        type: string
        example: 'I-am-unique-id'
  chatReactionObj:
    title: Chat Reaction API Response obj
    type: object
    properties:
      'msgUniqueId':
        description: 'Chat unique Identifier'
        type: string
        example: '5ede69893c2954edcfa0b5f7'
      'emojiCode':
        description: 'Emoje code string'
        type: string
        example: 'abc'
  chatSearchQueryObj:
    title: Chat Search query object
    type: object
    properties:
      text:
        description: 'Query string. Reuiqred.'
        type: string
        example: 'abc'
      threadId:
        description: 'Thread Id if search target is particular thread. optional.'
        type: string
        example: '5ede69893c2954edcfa0b5f7'
  unifiedSearchSearchQuery:
    title: searchQuery keyword data in unified search API
    type: object
    properties:
      text:
        description: 'Query string. Reuiqred.'
        type: string
        example: 'abc'
      threadId:
        description: 'Thread Id if search target is particular thread. optional.'
        type: string
        example: '5ede69893c2954edcfa0b5f7'
      channelQuery:
        $ref: '#/definitions/channelQueryObj'
  channelQueryObj:
    title: Unified search channel specific options
    type: object
    properties:
      joined:
        description: 'Get groups user have joined'
        type: boolean
        example: true
      groupType:
        description: 'Public or private group'
        type: string
        example: 'private'
        enum: ['public', 'private']
  chatSearchRequest:
    title: Chat Search API Request obj
    type: object
    properties:
      'searchQuery':
        $ref: '#/definitions/chatSearchQueryObj'
      'resultCategories':
        description: 'Result category list'
        type: array
        items:
          description: 'Result category string'
          type: string
          example: 'messages'
  unifiedSearchRequest:
    title: Unified search input body
    type: object
    properties:
      'searchQuery':
        $ref: '#/definitions/unifiedSearchSearchQuery'
      'resultCategories':
        description: 'Result category list'
        type: array
        items:
          description: 'Result category string'
          type: string
          example: 'messages, files'
          enum: ['messages', 'files', 'channels']
  chatSearchResultCategoryObj:
    title: Result category object in Chat Search response
    type: object
    properties:
      'total':
        description: 'Total Chats in history under particular threadId.'
        type: number
        example: 999
      'chats':
        description: 'List of history conversations'
        type: array
        items:
          $ref: '#/definitions/ChatInHistorySchema'
      'threads':
        description: 'List of threads'
        type: array
        items:
          $ref: '#/definitions/threadResponse'
  chatSearchResponse:
    title: Chat Search API Response result
    type: object
    properties:
      'messages':
        $ref: '#/definitions/chatSearchResultCategoryObj'
      'files':
        $ref: '#/definitions/chatSearchResultCategoryObj'
  unifiedSearchResponse:
    title: Chat Search API Response result
    type: object
    properties:
      'messages':
        $ref: '#/definitions/chatSearchResultCategoryObj'
      'files':
        $ref: '#/definitions/chatSearchResultCategoryObj'
      'channels':
        $ref: '#/definitions/UserGroupsResponse'
  draftResponse:
    title: Chat API response
    type: object
    properties:
      'msgUniqueId':
        description: 'Unique identified of chat object generated by server'
        type: string
        example: '5c56c9a2218aec4b4a8a976f'
      'threadId':
        description: 'Thread Id'
        type: string
        example: '5c5dcfec2ac43bc9626fb9eb'
      'tenantId':
        description: 'Tenant Id'
        type: string
        example: '57964c1a2014c4544afb8efe'
      'msgType':
        description: 'message type. It can be text/image/video/gif/audio'
        type: string
        example: 'text'
      'createdAt':
        description: 'Chat object creation epoch time in miliseconds'
        type: number
        example: 1550852154000
      'metadata':
        description: 'JSON object which can be used for client reference in request/response context. Server will not do any processing on this object.'
        type: object
        example: { 'abc': 'def' }
      'mentions':
        $ref: '#/definitions/mentionsSchemaChatRequest'
  chatResponse:
    title: Chat API response
    type: object
    properties:
      'msgUniqueId':
        description: 'Unique identified of chat object generated by server'
        type: string
        example: '5c56c9a2218aec4b4a8a976f'
      'threadId':
        description: 'Thread Id'
        type: string
        example: '5c5dcfec2ac43bc9626fb9eb'
      'tenantId':
        description: 'Tenant Id'
        type: string
        example: '57964c1a2014c4544afb8efe'
      'msgType':
        description: 'message type. It can be text/image/video/gif/audio'
        type: string
        example: 'text'
      'createdAt':
        description: 'Chat object creation epoch time in miliseconds'
        type: number
        example: 1550852154000
      'metadata':
        description: 'JSON object which can be used for client reference in request/response context. Server will not do any processing on this object.'
        type: object
        example: { 'abc': 'def' }
      'chatStatus':
        $ref: '#/definitions/chatStatusSchema'
      'replyThreadFeatureData':
        $ref: '#/definitions/replyThreadSchemaChatResponse'
      'mentions':
        $ref: '#/definitions/mentionsSchemaChatRequest'
  chatStatusSchema:
    title: 'Chat status object. Used to highlight if any issues related to receiver/sender keys. Applicable only for e2e encrypted chat'
    type: object
    properties:
      'returnCode':
        description: 'return code for e2e encrypted chat request. It can be senderKeyValidityExpired (new key to be provided in keyList, also new device key if there) / receiverKeyValidationError / senderNewDeviceKeyAvailable (new device key to be provided in keyList, also same device key if validity expired) / success'
        type: string
        example: 'senderKeyValidityExpired'
      'retryRequired':
        description: 'Boolean parameter which indicates if same chat needs to be re-sent after resolving issues based on returnCode'
        type: boolean
        example: true
      'keyList':
        description: 'list of key details based on returnCode. Details of this list depends on returnCode.'
        type: array
        items:
          $ref: '#/definitions/e2eKeyObjWithReturnCodee'
  ChatHistoryClearSchema:
    title: Clear chat history respones
    type: object
    properties:
      'threadId':
        description: 'Thread ID'
        type: string
        example: '5c56c9a2218aec4b4a8a976e'
      'timestamp':
        description: ISO Date
        type: string
        example: '2021-12-07T06:50:55.036Z'
  ChatHistoryResponseSchema:
    title: Chat History Response
    type: object
    properties:
      'total':
        description: 'Total Chats in history under particular threadId.'
        type: number
        example: 999
      'baseMessage':
        $ref: '#/definitions/ChatInHistorySchema'
      'chats':
        description: 'List of history conversations'
        type: array
        items:
          $ref: '#/definitions/ChatInHistorySchema'
  ReplyThreadHistoryResponseSchema:
    title: Reply Thread History Response
    type: object
    properties:
      'total':
        description: 'Total Chats in history under particular threadId.'
        type: number
        example: 999
      'chats':
        description: 'List of history conversations'
        type: array
        items:
          $ref: '#/definitions/ReplyThreadResultSchema'

  threadRequest:
    title: Thread API request
    type: object
    properties:
      'sendereRTCUserId':
        description: 'eRTC user id of source user'
        type: string
        example: '5c56c9a2218aec4b4a8a976f'
      'recipientAppUserId':
        description: 'App user Id of receiver'
        type: string
        example: 'abc@gmail.com'
  threadUpdateRequest:
    title: Thread Update request
    type: object
    properties:
      'notificationSettings':
        $ref: '#/definitions/notificationSettings'
      'autoDeleteSetting':
        $ref: '#/definitions/autoDeleteSetting'
  notificationSettings:
    title: Notification settings schema
    type: object
    properties:
      'allowFrom':
        description: 'Allow from values. It can be all/mentions/none. When it is include in thread response, can have value just for requesting used.'
        type: string
        example: 'none'
      'validTill':
        description: 'When setting should reset'
        type: string
        example: '2021-11-11T12:22:53.325Z'
      'validTillDisplayValue':
        description: 'To help frontend preselect value'
        type: string
        example: '12 Days'
        pattern: /^[0-9]{1,3} (Day|Week|Month|Year)[s]{0,1}$/
  autoDeleteSetting:
    title: Disappearing message setting
    type: object
    properties:
      'enabled':
        description: 'Enabled or not'
        type: boolean
        example: true
      'deleteAfterMiliSeconds':
        description: 'SHould be deleted after this many miliseconds'
        type: number
        example: 1000000
  threadResponse:
    title: Thread API response
    type: object
    properties:
      'recipientAppUserId':
        description: 'App user Id of receiver'
        type: string
        example: 'abc@gmail.com'
      'threadId':
        description: 'Thread ID'
        type: string
        example: '5c56c9a2218aec4b4a8a976e'
      'threadType':
        description: 'Type of thread - single/group'
        type: string
        example: 'single'
      'tenantId':
        description: 'Tenant ID'
        type: string
        example: '57964c1a2014c4544afb8efe'
      'createdAt':
        description: 'Therad object creation time'
        type: number
        example: 1550852154
      'participants':
        description: 'array of read timestamps'
        type: array
        items:
          $ref: '#/definitions/threadMemberSchema'
      'e2eEncryptionKeys':
        $ref: '#/definitions/e2eEncryptionKeyList'
  ThreadHistoryV2ResponseSchema:
    title: Thread History Response
    type: object
    properties:
      'total':
        description: 'Total conversations in history with matching threadType.'
        type: number
        example: 99
      'threads':
        description: 'List of history conversations'
        type: array
        items:
          $ref: '#/definitions/threadInHistoryV2Schema'
  threadInHistoryV2Schema:
    title: Thread History Response
    type: object
    properties:
      thread:
        title: Thread object
        type: object
        properties:
          'threadId':
            description: 'Thread ID'
            type: string
            example: '5c56c9a2218aec4b4a8a976e'
          'threadType':
            description: 'Type of thread - single/group'
            type: string
            example: 'single'
          'tenantId':
            description: 'Tenant ID'
            type: string
            example: '57964c1a2014c4544afb8efe'
          'createdAt':
            description: 'Therad object creation time'
            type: number
            example: 1550852154
          'participants':
            description: 'array of read timestamps'
            type: array
            items:
              $ref: '#/definitions/threadMemberInHistorySchema'
          'user':
            $ref: '#/definitions/userInThreadHistorySchema'
          'group':
            $ref: '#/definitions/GroupHighLevelDetails'
          'lastMessage':
            $ref: '#/definitions/lastMessageSchema'
  lastMessageSchema:
    title: 'last message of thread'
    type: object
    properties:
      'msgUniqueId':
        description: 'Unique identified of chat object generated by server'
        type: string
        example: '5c56c9a2218aec4b4a8a976f'
      'tenantId':
        description: 'Tenant Id'
        type: string
        example: '57964c1a2014c4544afb8efe'
      'message':
        description: 'message text. it can be present for any msgType value'
        type: string
        example: 'hello'
      'msgType':
        description: 'message type. it can be text/image/audio/video/gif/file/contact/location'
        type: string
        example: 'text'
      'contact':
        $ref: '#/definitions/contactSchema'
      'location':
        $ref: '#/definitions/locationSchema'
      'media':
        $ref: '#/definitions/mediaSchema'
      'gify':
        description: 'gify URL'
        type: string
        example: 'https://gify.com/test.gif'
      'sendereRTCUserId':
        description: 'sender eRTCUserId'
        type: string
        example: '5eef97669c612ed1ca595314'
      'createdAt':
        description: 'Chat object creation epoch time in miliseconds'
        type: string
        example: '1550852154000'
      'replyThreadFeatureData':
        $ref: '#/definitions/replyThreadSchemaChatReceive'
      'forwardChatFeatureData':
        $ref: '#/definitions/forwardChatSchemaChatReceive'
      'reactions':
        description: 'list of reactions'
        type: array
        items:
          $ref: '#/definitions/reactionInChatHistorySchema'
      'isStarred':
        description: 'If chat is starred'
        type: boolean
        example: true
      'mentions':
        $ref: '#/definitions/mentionsSchemaChatRequest'
      'deleteScheduleAt':
        description: 'When the message will automatically be deleted if it was send when disappearing message option was on'
        type: string
        example: '2021-12-18T12:22:53.325Z'
  ThreadHistoryResponseSchema:
    title: Thread History Response
    type: object
    properties:
      'total':
        description: 'Total conversations in history with matching threadType.'
        type: number
        example: 99
      'threads':
        description: 'List of history conversations'
        type: array
        items:
          $ref: '#/definitions/threadInHistorySchema'
  threadInHistorySchema:
    title: Thread History Response
    type: object
    properties:
      thread:
        title: Thread object
        type: object
        properties:
          'threadId':
            description: 'Thread ID'
            type: string
            example: '5c56c9a2218aec4b4a8a976e'
          'threadType':
            description: 'Type of thread - single/group'
            type: string
            example: 'single'
          'tenantId':
            description: 'Tenant ID'
            type: string
            example: '57964c1a2014c4544afb8efe'
          'createdAt':
            description: 'Therad object creation time'
            type: number
            example: 1550852154
          'participants':
            description: 'array of read timestamps'
            type: array
            items:
              $ref: '#/definitions/threadMemberInHistorySchema'
          'user':
            $ref: '#/definitions/userInThreadHistorySchema'
          'group':
            $ref: '#/definitions/GroupHighLevelDetails'
  fcmValidationRequest:
    title: FCM Validation Request
    type: object
    properties:
      'fcmToken':
        description: 'FCM Token'
        type: string
        example: 'cBh9QAuXhDI:APA91bEo7bXbiSoNmCzhm6rF_sLnReJkSbIt0PR_NWtaG0PNWI_mPZyFnIfWZP-sx-_7HNbgnrTIlIGV4fsC8xEqkLijFmTYKrJSpSHYK_Gnr5CLx5Rmwz9X7CciL7v7B8IO5Yu3Cn9O'
      'payload':
        description: 'Refer https://firebase.google.com/docs/reference/admin/node/admin.messaging.Messaging#sendToDevice for possible values'
        type: object
      'options':
        description: 'Refer https://firebase.google.com/docs/reference/admin/node/admin.messaging.Messaging#sendToDevice for possible values'
        type: object
  threadObj:
    title: Chat response
    type: object
    properties:
      'threadId':
        description: 'Thread ID'
        type: string
        example: '5c56c9a2218aec4b4a8a976e'
      'threadType':
        description: 'Type of thread - single/group'
        type: string
        example: 'single'
      'tenantId':
        description: 'Tenant ID'
        type: string
        example: '57964c1a2014c4544afb8efe'
      'createdAt':
        description: 'Therad object creation time'
        type: number
        example: 1550852154
      'participants':
        description: 'array of read timestamps'
        type: array
        items:
          $ref: '#/definitions/threadMemberSchema'
  threadMemberSchema:
    title: Thread member schema
    type: object
    properties:
      'user':
        description: 'eRTC user Id of member'
        type: string
        example: '5c56c9a2218aec4b4a8a976e'
      'notificationSettings':
        $ref: '#/definitions/notificationSettings'
      'autoDeleteSetting':
        $ref: '#/definitions/autoDeleteSetting'
  threadMemberInHistorySchema:
    title: Thread member in History response
    type: object
    properties:
      'eRTCUserId':
        description: 'eRTC user Id of member'
        type: string
        example: '5c56c9a2218aec4b4a8a976e'
      'appUserId':
        description: 'appUserId of member'
        type: string
        example: 'abc@def.com'
      'notificationSettings':
        $ref: '#/definitions/notificationSettings'
  userInThreadHistorySchema:
    title: user details in single thread
    description: 'Applicable only for single threaType.'
    type: object
    properties:
      'eRTCUserId':
        description: 'eRTC user Id of member'
        type: string
        example: '5c56c9a2218aec4b4a8a976e'
      'appUserId':
        description: 'appUserId of member'
        type: string
        example: 'abc@def.com'
      'name':
        description: 'name of member'
        type: string
        example: 'John'
      'availabilityStatus':
        description: 'availability status of user. i.e. online/away/invisible/dnd'
        type: string
        example: 'online'
  locationSchema:
    title: Location schema
    type: object
    properties:
      'longitude':
        description: 'Longitude'
        type: number
        example: 1.234
      'latitude':
        description: 'Latitude'
        type: number
        example: 2.34567
      'address':
        description: 'Address of location'
        type: string
        example: '1, ABC road, US'
  contactSchema:
    title: Contact schema
    type: object
    properties:
      'name':
        description: 'Name of contact'
        type: string
        example: 'Rakesh'
      'numbers':
        description: 'Contact Number'
        type: array
        items:
          $ref: '#/definitions/NumberContactSchema'
      'emails':
        description: 'Contact Email'
        type: array
        items:
          $ref: '#/definitions/EmailContactSchema'
  NumberContactSchema:
    title: Number Contact schema
    type: object
    properties:
      'type':
        description: 'Type of Number contact. For example Home/Work'
        type: string
        example: 'Home'
      'number':
        description: 'Contact Number'
        type: string
        example: '+911234567890'
  EmailContactSchema:
    title: Email Contact schema
    type: object
    properties:
      'type':
        description: 'Type of Email contact. For example Home/Work'
        type: string
        example: 'Home'
      'email':
        description: 'Email'
        type: string
        example: 'abc@def.com'
  mediaSchema:
    title: Media details schema
    type: object
    properties:
      'path':
        description: 'media URL. use chatServer URL as prefix to generate complete URL'
        type: string
        example: 'file/chat/57964c1a2014c4544afb8efeundefined_1550946919027.png'
      'thumbnail':
        description: "media thumbnail URL. It can be present for only media with msgType as 'image'. use chatServer URL as prefix to generate complete URL"
        type: string
        example: 'file/chat/57964c1a2014c4544afb8efeundefined_1550946919027.png'
      'name':
        description: 'original name of file uploaded'
        type: string
        example: 'abc.jpg'
  threadReplyReplies:
    title: Reply in replyThread
    type: object
    properties:
      '_id':
        description: 'uniqueId of the first reply messageL'
        type: string
        example: '61701a5423ae296f5c3a1768'
      'threadId':
        description: 'Id of the thread'
        type: string
        example: '61701a4523ae296f5c3a1764'
      'message':
        description: 'text sent in message'
        type: string
        example: '518 Genesis Crest'
      'msgType':
        description: 'type of message'
        type: string
        example: 'text'
      'sendereRTCUserId':
        description: 'Sender eRTCUserId of message'
        type: string
        example: '5c718e3d6fd9fae6afe2f83b'
      'replyThreadFeatureData':
        $ref: '#/definitions/replyThreadSchemaChatRequest'
      'senderTimeStampMs':
        description: 'epoch timestamp (in ms) of message creation generated on sender device'
        type: number
        example: 1601660022564
      'tenantId':
        description: 'Tenant Id'
        type: string
        example: '57964c1a2014c4544afb8efe'
      'isEdited':
        description: 'If chat message is starred'
        type: boolean
        example: true
      'reactions':
        description: 'list of reactions'
        type: array
        items:
          $ref: '#/definitions/reactionInChatHistorySchema'
  ReplyThreadResultSchema:
    allOf:
      - $ref: '#/definitions/ChatInHistorySchema'
      - properties:
          'replies':
            description: '2 replies'
            type: array
            items:
              $ref: '#/definitions/threadReplyReplies'
  ChatInHistorySchema:
    title: 'Chat object in chat history response'
    type: object
    properties:
      'msgUniqueId':
        description: 'Unique identified of chat object generated by server'
        type: string
        example: '5c56c9a2218aec4b4a8a976f'
      'tenantId':
        description: 'Tenant Id'
        type: string
        example: '57964c1a2014c4544afb8efe'
      'message':
        description: 'message text. it can be present for any msgType value'
        type: string
        example: 'hello'
      'msgType':
        description: 'message type. it can be text/image/audio/video/gif/file/contact/location'
        type: string
        example: 'text'
      'contact':
        $ref: '#/definitions/contactSchema'
      'location':
        $ref: '#/definitions/locationSchema'
      'media':
        $ref: '#/definitions/mediaSchema'
      'gify':
        description: 'gify URL'
        type: string
        example: 'https://gify.com/test.gif'
      'sendereRTCUserId':
        description: 'sender eRTCUserId'
        type: string
        example: '5eef97669c612ed1ca595314'
      'createdAt':
        description: 'Chat object creation epoch time in miliseconds'
        type: string
        example: '1550852154000'
      'replyThreadFeatureData':
        $ref: '#/definitions/replyThreadSchemaChatReceive'
      'forwardChatFeatureData':
        $ref: '#/definitions/forwardChatSchemaChatReceive'
      'reactions':
        description: 'list of reactions'
        type: array
        items:
          $ref: '#/definitions/reactionInChatHistorySchema'
      'isEdited':
        description: 'If chat message is starred'
        type: boolean
        example: true
      'isStarred':
        description: 'If chat is starred'
        type: boolean
        example: true
      'follow':
        description: 'Only present on base message when user is following thread'
        type: boolean
        example: true
      'chatReportId':
        description: 'If message is reported then it will contain chat report id'
        type: string
        example: '60caeb30107058635fcf293d'
      'chatReportStatus':
        description: 'Tell status of chat report, possible values are new,reportConsidered and reportIgnored'
        type: string
        example: 'new'
      'mentions':
        $ref: '#/definitions/mentionsSchemaChatRequest'
      'customData':
        description: 'JSON object which can be used for customer specific data which is not supported in InAppChat chat model. eg. { "abc" : "def" }'
        type: object
        example: { 'abc': 'def' }
      'deleteScheduleAt':
        description: 'When the message will automatically be deleted if it was send when disappearing message option was on'
        type: string
        example: '2021-12-18T12:22:53.325Z'
  reactionInChatHistorySchema:
    title: 'Reaction in chat history response'
    type: object
    properties:
      'emojiCode':
        description: 'Emoje code string'
        type: string
        example: 'abc'
      'count':
        description: 'Emoje code string'
        type: string
        example: 'abc'
      'users':
        description: 'List of eRTCUserIds'
        type: array
        items:
          type: string
          example: '5c56c9a2218aec4b4a8a976f'
  ChatEventSubscribe:
    title: 'Recepient Chat model. chat:<eRTCUserId>/<deviceId>'
    type: object
    properties:
      'msgUniqueId':
        description: 'Unique identified of chat object generated by server'
        type: string
        example: '5c56c9a2218aec4b4a8a976f'
      'tenantId':
        description: 'Tenant Id'
        type: string
        example: '57964c1a2014c4544afb8efe'
      'message':
        description: 'message text. it can be present for any msgType value'
        type: string
        example: 'hello'
      'msgType':
        description: 'message type. it can be text/image/audio/video/gif/file/contact/location'
        type: string
        example: 'text'
      'contact':
        $ref: '#/definitions/contactSchema'
      'location':
        $ref: '#/definitions/locationSchema'
      'media':
        $ref: '#/definitions/mediaSchema'
      'gify':
        description: 'gify URL'
        type: string
        example: 'https://gify.com/test.gif'
      'sendereRTCUserId':
        $ref: '#/definitions/senderInChatEventSubscribe'
      'createdAt':
        description: 'Chat object creation epoch time in miliseconds'
        type: string
        example: '1550852154000'
      'thread':
        $ref: '#/definitions/threadObj'
      'senderKeyDetails':
        description: 'Sender key details used for this chat.'
        type: object
        properties:
          'keyId':
            description: 'Key identifier. This is optional. If it is not provided, means this publice key needs to be registerd.'
            type: string
            example: '5dd1732e27eda6253f15629b'
          'deviceId':
            description: 'Device identifier.'
            type: string
            example: '2b6f0cc904d137be2e1730235f5664094b831186'
          'publicKey':
            description: 'public Key of associated device'
            type: string
            example: 'CI2k_HHwgIpoDKCIZvvDMExUdFQ3P1'
      'encryptedChat':
        $ref: '#/definitions/encryptedChatObj'
      'replyThreadFeatureData':
        $ref: '#/definitions/replyThreadSchemaChatReceive'
      'forwardChatFeatureData':
        $ref: '#/definitions/forwardChatSchemaChatReceive'
      'isSilent':
        description: 'If notification to be silent or not'
        type: boolean
        example: true
      'msgCorrelationId':
        description: 'Client generated unique identifier used to trace message delivery till receiver.'
        type: string
        example: 'I-am-unique-id'
      'senderTimeStampMs':
        description: 'epoch timestamp (in ms) of message creation generated on sender device'
        type: number
        example: 1601660022564
      'customData':
        description: 'JSON object which can be used for customer specific data which is not supported in InAppChat chat model. eg. { "abc" : "def" }'
        type: object
        example: { 'abc': 'def' }
  senderInChatEventSubscribe:
    title: 'Sender object in Recepient Chat model'
    type: object
    properties:
      'eRTCUserId':
        description: 'eRTC user Id'
        type: string
        example: '5c56c9a2218aec4b4a8a976e'
      'appUserId':
        description: 'User ID i.e. abc@def.com'
        type: string
        example: 'abc@ertc.com'
      'name':
        description: 'User name'
        type: string
        example: 'John A'
  availabilityStatusSubscribe:
    title: 'Availability status notification. availabilityStatus:<tenantId>'
    type: object
    properties:
      'eRTCUserId':
        description: 'eRTC user Id'
        type: string
        example: '5c56c9a2218aec4b4a8a976e'
      'appUserId':
        description: 'User ID i.e. abc@def.com'
        type: string
        example: 'abc@ertc.com'
      'availabilityStatus':
        description: 'availability status of user. i.e. online/away/invisible/dnd'
        type: string
        example: 'online'
  msgReadStatusEventPublish:
    title: 'Publish Message Read Status. topic - msgReadStatus'
    type: object
    properties:
      'tenantId':
        description: 'Unique identified tenant'
        type: string
        example: '57964c1a2014c4544afb8efe'
      'msgUniqueId':
        description: 'Unique identified of chat object generated by server'
        type: string
        example: '5c56c9a2218aec4b4a8a976f'
      'sendereRTCUserId':
        description: 'Sender eRTCUserId of message'
        type: string
        example: '5c718e3d6fd9fae6afe2f83b'
      'deviceId':
        description: 'Device Id'
        type: string
        example: 'abcdef'
      'threadId':
        description: 'Unique identified Thread'
        type: string
        example: '5c979627ef904a935f09c4d9'
      'eRTCUserId':
        description: "User's eRTCUserId who pubblished this topic"
        type: string
        example: '5c7ec917b7d471377ee66e4f'
      'msgStatusEvent':
        description: 'Message status event type : delivered/seen'
        type: string
        example: 'seen'
      'timeStamp':
        description: 'Message status event time stamp'
        type: number
        example: 1550852154
      'replyThreadFeatureData':
        $ref: '#/definitions/replyThreadSchemaChatRequest'
      'msgCorrelationId':
        description: 'Client generated unique identifier used to trace message delivery till receiver.'
        type: string
        example: 'I-am-unique-id'
  msgReadStatusEventSubscribe:
    title: 'Subscribe Message Read Status. topic- msgReadStatus:<eRTCUserId>'
    type: object
    properties:
      'tenantId':
        description: 'Unique identified tenant'
        type: string
        example: '57964c1a2014c4544afb8efe'
      'msgUniqueId':
        description: 'Unique identified of chat object generated by server'
        type: string
        example: '5c56c9a2218aec4b4a8a976f'
      'threadId':
        description: 'Unique identified Thread'
        type: string
        example: '5c979627ef904a935f09c4d9'
      'eRTCUserId':
        description: "User's eRTCUserId who pubblished this topic"
        type: string
        example: '5c7ec917b7d471377ee66e4f'
      'msgStatusEvent':
        description: 'Message status event type : delivered/seen'
        type: string
        example: 'seen'
      'timeStamp':
        description: 'Message status event time stamp'
        type: number
        example: 1550852154
      'replyThreadFeatureData':
        $ref: '#/definitions/replyThreadSchemaChatRequest'
      'msgCorrelationId':
        description: 'Client generated unique identifier used to trace message delivery till receiver.'
        type: string
        example: 'I-am-unique-id'
  typingStatusEventPublish:
    title: 'Publish Typing Status. topic - typingStatus'
    type: object
    properties:
      'tenantId':
        description: 'Unique identified tenant'
        type: string
        example: '57964c1a2014c4544afb8efe'
      'participants':
        description: 'Array of thread participant eRTCUserId except sender'
        type: array
        items:
          description: 'eRTCUserId of participant'
          type: string
          example: '5c718e3d6fd9fae6afe2f83b'
      'threadId':
        description: 'Unique identified Thread'
        type: string
        example: '5c979627ef904a935f09c4d9'
      'eRTCUserId':
        description: "User's eRTCUserId who pubblished this topic"
        type: string
        example: '5c7ec917b7d471377ee66e4f'
      'typingStatusEvent':
        description: 'Typing status event type : on/off'
        type: string
        example: 'on'
      'threadType':
        description: 'Thread group : single/group'
        type: string
        example: 'single'
      'msgCorrelationId':
        description: 'Client generated unique identifier used to trace message delivery till receiver.'
        type: string
        example: 'I-am-unique-id'
  typingStatusEventSubscribe:
    title: 'Publish Typing Status. topic - typingStatus:<eRTCUserId>'
    type: object
    properties:
      'tenantId':
        description: 'Unique identified tenant'
        type: string
        example: '57964c1a2014c4544afb8efe'
      'threadId':
        description: 'Unique identified Thread'
        type: string
        example: '5c979627ef904a935f09c4d9'
      'eRTCUserId':
        description: "User's eRTCUserId who pubblished this topic"
        type: string
        example: '5c7ec917b7d471377ee66e4f'
      'typingStatusEvent':
        description: 'Typing status event type : on/off'
        type: string
        example: 'on'
      'name':
        description: 'Name of the user typing. This needs to be populated from source device.'
        type: string
        example: 'on'
      'msgCorrelationId':
        description: 'Client generated unique identifier used to trace message delivery till receiver.'
        type: string
        example: 'I-am-unique-id'
  FcmMqttuserSelfUpdate:
    title: 'User self update notification to prallel logge-in devices. FCM event name : userSelfUpdate. MQTT Topic - userSelfUpdate:<clientId>... It is triggered when user related data like notificationSettings, availabilityStatus is modified.'
    type: object
    properties:
      'eRTCUserId':
        description: "User's eRTCUserId"
        type: string
        example: '5c7ec917b7d471377ee66e4f'
      'eventList':
        type: array
        items:
          $ref: '#/definitions/userSelfUpdateEventItem'
  FcmMqttgroupUpdated:
    title: 'Group update notification to all group member. FCM event name : groupUpdated'
    type: object
    properties:
      'eventTriggeredByUser':
        $ref: '#/definitions/groupUpdateEventUserDetails'
      'groupId':
        description: 'Group ID with which event is related'
        type: string
        example: '5c7ec917b7d471377ee66e4f'
      'threadId':
        description: 'Thread ID of associated group'
        type: string
        example: '5c7ec917b7d471377ee66e4f'
      'eventList':
        type: array
        items:
          $ref: '#/definitions/groupUpdatedEventItem'
  FcmMqttChatReaction:
    title: 'Chat reaction notification. FCM event name - chatReaction, MQTT Topic - chatReaction:<clientId>'
    type: object
    properties:
      'eRTCUserId':
        description: 'User unique Identifier'
        type: string
        example: '5ede69893c2954edcfa0b5f7'
      'msgUniqueId':
        description: 'Chat unique Identifier'
        type: string
        example: '5ede69893c2954edcfa0b5f7'
      'emojiCode':
        description: 'Emoje code string'
        type: string
        example: 'abc'
      'action':
        description: 'Reaction actionType. It can be set/clear'
        type: string
        example: 'set'
      'totalCount':
        description: 'Total count of particular reaction with emojiCode'
        type: number
        example: 5
      'threadId':
        description: 'Thread unique identifier'
        type: string
        example: '5ede69893c2954edcfa0b5f8'
      'tenantId':
        description: 'Tenant unique identifier'
        type: string
        example: '5ede69893c2954edcfa0b5f8'
      'replyThreadFeatureData':
        $ref: '#/definitions/replyThreadSchemaChatRequest'
      'msgCorrelationId':
        description: 'Client generated unique identifier used to trace message delivery till receiver.'
        type: string
        example: 'I-am-unique-id'
  FcmMqttChatUpdate:
    title: 'Chat update notification. It can be used for delete, edit etc. FCM event name - chatUpdate, MQTT Topic - chatUpdate:<clientId>'
    type: object
    properties:
      'eRTCUserId':
        description: 'User unique Identifier'
        type: string
        example: '5ede69893c2954edcfa0b5f7'
      'chats':
        description: 'List of deleted chats'
        type: array
        items:
          $ref: '#/definitions/chatObjIndeleteChatResponse'
      'msgUniqueId':
        description: 'Chat unique Identifier'
        type: string
        example: '5ede69893c2954edcfa0b5f7'
      'updateType':
        description: 'Type of update. eg. delete/edit'
        type: string
        example: 'abc'
      'threadId':
        description: 'Thread unique identifier'
        type: string
        example: '5ede69893c2954edcfa0b5f8'
      'tenantId':
        description: 'Tenant unique identifier'
        type: string
        example: '5ede69893c2954edcfa0b5f8'
      'msgCorrelationId':
        description: 'Client generated unique identifier used to trace message delivery till receiver.'
        type: string
        example: 'I-am-unique-id'
      'deleteType':
        description: 'in case of delete updateType, it specifies sub-type of delete such as self/everyone'
        type: string
        example: 'everyone'
  userSelfUpdateEventItem:
    title: 'User self-update FCM event item'
    type: object
    properties:
      'eventType':
        description: 'Type of the event. it can be availabilityStatusChanged / notificationSettingsChangedGlobal / notificationSettingsChangedThread / userBlockedStatusChanged '
        type: string
        example: 'notificationSettingsChangedGlobal'
      eventData:
        title: 'User self-update event data.'
        type: object
        properties:
          'threadId':
            description: 'Optional. Thread id only applicable for notificationSettingsChangedThread'
            type: string
            example: '5c7ec917b7d471377ee66e4f'
          'notificationSettings':
            $ref: '#/definitions/notificationSettings'
          'availabilityStatus':
            description: 'Optional. Only applicable for availabilityStatusChanged. Availability status i.e. online/away/invisible/dnd'
            type: string
            example: 'online'
          'blockedStatus':
            description: 'Optional. Only applicable for userBlockedStatusChanged. Blocked status i.e. blocked/unblocked'
            type: string
            example: 'blocked'
          'targetUser':
            $ref: '#/definitions/baseMsgResponderSchema'
  groupUpdateEventUserDetails:
    title: 'Details of user.'
    type: object
    properties:
      'eRTCUserId':
        description: "User's eRTCUserId"
        type: string
        example: '5c7ec917b7d471377ee66e4f'
      'appUserId':
        description: "User's appUserId"
        type: string
        example: 'abc@xyz.com'
  groupUpdateEventChangeData:
    title: 'Change data object which specify the change. i.e. previous value and new value'
    type: object
    properties:
      'name':
        description: 'Applicable for created/nameChanged/profilePicChanged/descriptionChanged eventTypes'
        type: object
        properties:
          'previous':
            description: 'Previous value. Applicable only for nameChanged'
            type: string
            example: 'Group ABC'
          'new':
            description: 'new value'
            type: string
            example: 'Group XYZ'
  groupUpdatedEventItem:
    title: 'Group update FCM event item'
    type: object
    properties:
      'eventType':
        description: 'Type of the group event. it can be created/participantsAdded/participantsRemoved/nameChanged/profilePicChanged/descriptionChanged/profilePicRemoved/adminMade/adminDismissed'
        type: string
        example: 'notificationSettingsChangedGlobal'
      eventData:
        title: 'Group update event data.'
        type: object
        properties:
          'eventTriggeredOnUserList':
            description: 'Optional. Applicable for participantsAdded/participantsRemoved/adminMade/adminDismissed'
            type: array
            items:
              $ref: '#/definitions/groupUpdateEventUserDetails'
          'changeData':
            $ref: '#/definitions/groupUpdateEventChangeData'
  ChatReportCreateRequest:
    title: Create Chat Report
    type: object
    properties:
      'msgUniqueId':
        description: 'Unique Message Id for which you want to raise report'
        type: string
        example: '5c56c9a2218aec4b4a8a976e'
      'category':
        description: 'Catgory of Chat Report possible values : other, abuse, spam, inappropriate'
        type: string
        example: 'spam'
      'reason':
        description: 'detailed reason for raising chat report'
        type: string
        example: 'Bad words used in message text'
  ChatReportUpdateRequest:
    title: Update Chat Report
    type: object
    properties:
      'category':
        description: 'Catgory of Chat Report possible values : other, abuse, spam, inappropriate'
        type: string
        example: 'abuse'
      'reason':
        description: 'detailed reason for raising chat report'
        type: string
        example: 'Bad words used in message text'
  ChatReportCreateSchema:
    title: Chat Report create object
    type: object
    properties:
      'chatReportId':
        description: 'Chat Report ID'
        type: string
        example: '5d39f5990e7b2ea2a09592c6'
      'tenantId':
        description: 'Tenant Id'
        type: string
        example: '5d39f5990e7b2ea2a09592c6'
  ChatReportSchema:
    title: Chat Report object
    type: object
    properties:
      'chatReportId':
        description: 'Chat Report ID'
        type: string
        example: '5d39f5990e7b2ea2a09592c6'
      'tenantId':
        description: 'Tenant Id'
        type: string
        example: '5d39f5990e7b2ea2a09592c6'
      'category':
        description: 'Category of chat Report'
        type: string
        example: 'spam'
      'reason':
        description: 'detailed reason for raising chat report'
        type: string
        example: 'Bad words used in message text'
      'channelAdminStatus':
        description: 'channel Admin Status'
        type: object
        properties:
          'status':
            description: 'status of report (new/reportConsidered, reportIgnored)'
            type: string
            example: 'reportConsidered'
          'createdAt':
            description: 'Chat Report Status creation epoch timeStamp'
            type: number
            example: 1564079514
          'category':
            description: 'Category of chat Report'
            type: string
            example: 'spam'
      'tenantAdminStatus':
        description: 'tenant Admin Status'
        type: object
        properties:
          'status':
            description: 'status of report (new/reportConsidered, reportIgnored)'
            type: string
            example: 'reportConsidered'
          'createdAt':
            description: 'Chat Report Status creation epoch timeStamp'
            type: number
            example: 1564079514
          'category':
            description: 'Category of chat Report'
            type: string
            example: 'spam'
      'reporterERTCUser':
        description: 'ertc User who reported the chat Report'
        type: object
        properties:
          'appUserId':
            description: 'appUserId of user'
            type: string
            example: 'abc@ertc.com'
          'eRTCUserId':
            description: 'eRTC user ID of user'
            type: string
            example: '5d344196b9801e6d0b110486'
          'name':
            description: 'name of user'
            type: string
            example: 'abc'
      'chat':
        $ref: '#/definitions/chatResponse'
  ChatReportListSchema:
    title: Chat Report List object
    type: object
    properties:
      'total':
        description: 'total count of chat reports'
        type: number
        example: 5
      'chatReports':
        description: 'List of chat reports'
        type: array
        items:
          $ref: '#/definitions/ChatReportSchema'
  ChatReportDeleteSchema:
    title: Chat Report delete object
    type: object
    properties:
      'message':
        description: 'message'
        type: string
        example: 'Chat Reports deleted successfully'
  ChatReportActionSchema:
    title: Chat Report action object
    type: object
    properties:
      'message':
        description: 'message'
        type: string
        example: 'Chat Reports updated  successfully'
  ChatSettingsSchema:
    title: Chat Settings object
    type: object
    properties:
      'tenantId':
        description: 'Tenant id'
        type: string
        example: 'ChatSetting-60a4fc8103a6f047ca02a1df'
      'profanityFilter':
        description: 'List of profanity filters'
        type: array
        items:
          type: object
          properties:
            'keywords':
              description: 'List of keywords'
              type: array
              items:
                type: string
                example: 'a'
            'regexes':
              description: 'List of regular expression'
              type: array
              items:
                type: string
                example: 's/hello/hi/g'
            'actionType':
              description: 'Type of action on match'
              type: string
              example: 'block'
      'domainFilter':
        description: 'List of domain filters'
        type: array
        items:
          type: object
          properties:
            'keywords':
              description: 'List of keywords'
              type: array
              items:
                type: string
                example: 'google.com'
            'actionType':
              description: 'Type of action on match'
              type: string
              example: 'allow'
  UpdateDraftSchema:
    title: Chat Settings object
    type: object
    properties:
      'threadId':
        description: 'Thread Id'
        type: string
        example: '60a4fc8103a6f047ca02a1df'
      'message':
        description: 'Message'
        type: string
        example: 'Hello'
  GetDraftSchema:
    title: Chat Settings object
    type: object
    properties:
      'tenantId':
        description: 'tenant Id'
        type: string
        example: '60a4fc8103a6f047ca02a1df'
      'threadId':
        description: 'Thread Id'
        type: string
        example: '60ae1ff7dc08679d669a723c'
      'message':
        description: 'Message'
        type: string
        example: 'Hello'
  RestrictParticipantsRequest:
    type: object
    properties:
      participants:
        type: array
        items:
          type: string
          example: 'iacu2@yopmail.com'
      type:
        type: string
        enum: ['ban', 'mute']
        example: 'ban'
      till:
        type: string
        example: '2021-06-14T14:02:03.527Z'
    description: Ban or mute participants
  UnrestrictParticipantsRequest:
    type: object
    properties:
      participants:
        type: array
        items:
          type: string
          example: 'iacu2@yopmail.com'
      type:
        type: string
        enum: ['ban', 'mute']
        example: 'ban'
    description: Unban or unmute participants
  FreezeUnfreezeEvent:
    description: Send when group is frozen or unfrozen
    type: object
    properties:
      groupId:
        type: string
        example: '6166d74594f04450bd4ecd0d'
      threadId:
        type: string
        example: '6166d74594f04450bd4ecd0c'
      eventList:
        type: array
        items:
          type: object
          properties:
            eventType:
              type: string
              example: 'frozen'
              enum: ['frozen', 'unfrozen']
  chatReportUpdated:
    type: object
    properties:
      chatReportId:
        type: 'string'
        example: '619ba10b67b75cda5345ea67'
      event:
        required:
          - 'eventType'
          - 'eventData'
        properties:
          eventType:
            type: 'string'
            example: 'actionUpdated'
          eventData:
            required:
              - 'chatReport'
            properties:
              chatReport:
                required:
                  - 'createdAt'
                  - 'tenantId'
                  - 'category'
                  - 'reason'
                  - 'channelAdminStatus'
                  - 'tenantAdminStatus'
                  - 'reporterERTCUser'
                  - 'chat'
                properties:
                  createdAt:
                    type: 'number'
                    example: 1637589301752
                  tenantId:
                    type: 'string'
                    example: 'ChatReport-6194ba6fd9babb49926cffe0'
                  category:
                    type: 'string'
                    example: 'spam'
                  reason:
                    type: 'string'
                    example: 'a'
                  channelAdminStatus:
                    required:
                      - 'status'
                      - 'createdAt'
                    properties:
                      status:
                        type: 'string'
                        example: 'new'
                      createdAt:
                        type: 'number'
                        example: 1637589259174
                    type: 'object'
                  tenantAdminStatus:
                    required:
                      - 'status'
                      - 'createdAt'
                    properties:
                      status:
                        type: 'string'
                        example: 'reportignored'
                      createdAt:
                        type: 'number'
                        example: 1637589301746
                    type: 'object'
                  reporterERTCUser:
                    required:
                      - 'appUserId'
                      - 'name'
                    properties:
                      appUserId:
                        type: 'string'
                        example: 'iacu1@yopmail.com'
                      name:
                        type: 'string'
                        example: 'One'
                    type: 'object'
                  chat:
                    required:
                      - 'threadId'
                      - 'tenantId'
                      - 'createdAt'
                    properties:
                      threadId:
                        type: 'string'
                        example: '619b99d25365722adce77a08'
                      tenantId:
                        type: 'string'
                        example: 'Chat-6194ba6fd9babb49926cffe0'
                      createdAt:
                        type: 'number'
                        example: 1637589166220
                    type: 'object'
                type: 'object'
            type: 'object'
        type: 'object'
    description: Chat report updated event
  getGroupInvitesByUserResponse:
    description: The response schema for get group-invites api
    type: object
    properties:
      groupId:
        type: string
        example: '6166d74594f04450bd4ecd0d'
      by:
        type: string
        example: '63dad74a74ef82813702c756'
      to:
        type: string
        example: '63dad74a74ef82813702c756'
      date:
        type: string
        example: '2023-02-02T19:44:56.355Z'

externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /RBN/Socket-Server/1.0.0
schemes:
  - https
  - http
