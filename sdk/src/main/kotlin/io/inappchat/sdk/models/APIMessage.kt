/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.inappchat.sdk.models

import io.inappchat.sdk.models.Contact
import io.inappchat.sdk.models.EncryptedMessage
import io.inappchat.sdk.models.Forward
import io.inappchat.sdk.models.Location
import io.inappchat.sdk.models.Media
import io.inappchat.sdk.models.Mention
import io.inappchat.sdk.models.MessageType
import io.inappchat.sdk.models.Reaction
import io.inappchat.sdk.models.Reply

import com.squareup.moshi.Json

/**
 * 
 *
 * @param msgUniqueId Unique identified of chat object generated by server
 * @param sendereRTCUserId sender eRTCUserId
 * @param createdAt Chat object creation epoch time in miliseconds
 * @param threadId The ID of the thread this message belongs to
 * @param message message text. it can be present for any msgType value
 * @param msgType 
 * @param contact 
 * @param location 
 * @param media 
 * @param gify gify URL
 * @param replyThreadFeatureData 
 * @param forwardChatFeatureData 
 * @param reactions list of reactions
 * @param isEdited If chat message is starred
 * @param isStarred If chat is starred
 * @param follow Only present on base message when user is following thread
 * @param chatReportId If message is reported then it will contain chat report id
 * @param chatReportStatus Tell status of chat report, possible values are new, reportConsidered and reportIgnored
 * @param mentions 
 * @param customData JSON object which can be used for customer specific data which is not supported in InAppChat chat model. eg. { \"abc\" : \"def\" }
 * @param deleteScheduleAt When the message will automatically be deleted if it was send when disappearing message option was on
 * @param replyMsgCount The number of replies to this message
 * @param replies 
 * @param encryptedChatList 
 */


data class APIMessage (

    /* Unique identified of chat object generated by server */
    @Json(name = "msgUniqueId")
    val msgUniqueId: kotlin.String,

    /* sender eRTCUserId */
    @Json(name = "sendereRTCUserId")
    val sendereRTCUserId: kotlin.String,

    /* Chat object creation epoch time in miliseconds */
    @Json(name = "createdAt")
    val createdAt: kotlin.String,

    /* The ID of the thread this message belongs to */
    @Json(name = "threadId")
    val threadId: kotlin.String,

    /* message text. it can be present for any msgType value */
    @Json(name = "message")
    val message: kotlin.String? = null,

    @Json(name = "msgType")
    val msgType: MessageType? = null,

    @Json(name = "contact")
    val contact: Contact? = null,

    @Json(name = "location")
    val location: Location? = null,

    @Json(name = "media")
    val media: Media? = null,

    /* gify URL */
    @Json(name = "gify")
    val gify: kotlin.String? = null,

    @Json(name = "replyThreadFeatureData")
    val replyThreadFeatureData: Reply? = null,

    @Json(name = "forwardChatFeatureData")
    val forwardChatFeatureData: Forward? = null,

    /* list of reactions */
    @Json(name = "reactions")
    val reactions: kotlin.collections.List<Reaction>? = null,

    /* If chat message is starred */
    @Json(name = "isEdited")
    val isEdited: kotlin.Boolean? = null,

    /* If chat is starred */
    @Json(name = "isStarred")
    val isStarred: kotlin.Boolean? = null,

    /* Only present on base message when user is following thread */
    @Json(name = "follow")
    val follow: kotlin.Boolean? = null,

    /* If message is reported then it will contain chat report id */
    @Json(name = "chatReportId")
    val chatReportId: kotlin.String? = null,

    /* Tell status of chat report, possible values are new, reportConsidered and reportIgnored */
    @Json(name = "chatReportStatus")
    val chatReportStatus: APIMessage.ChatReportStatus? = null,

    @Json(name = "mentions")
    val mentions: kotlin.collections.List<Mention>? = null,

    /* JSON object which can be used for customer specific data which is not supported in InAppChat chat model. eg. { \"abc\" : \"def\" } */
    @Json(name = "customData")
    val customData: kotlin.collections.Map<kotlin.String, kotlin.Any>? = null,

    /* When the message will automatically be deleted if it was send when disappearing message option was on */
    @Json(name = "deleteScheduleAt")
    val deleteScheduleAt: kotlin.String? = null,

    /* The number of replies to this message */
    @Json(name = "replyMsgCount")
    val replyMsgCount: kotlin.Int? = null,

    @Json(name = "replies")
    val replies: kotlin.collections.List<APIMessage>? = null,

    @Json(name = "encryptedChatList")
    val encryptedChatList: kotlin.collections.List<EncryptedMessage>? = null

) {

    /**
     * Tell status of chat report, possible values are new, reportConsidered and reportIgnored
     *
     * Values: new,reportConsidered,reportIgnored
     */
    enum class ChatReportStatus(val value: kotlin.String) {
        @Json(name = "new") new("new"),
        @Json(name = "reportConsidered") reportConsidered("reportConsidered"),
        @Json(name = "reportIgnored") reportIgnored("reportIgnored");
    }
}

