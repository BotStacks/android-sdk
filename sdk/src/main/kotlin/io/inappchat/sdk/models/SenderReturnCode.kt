/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package io.inappchat.sdk.models


import com.squareup.moshi.Json

/**
 * return code for e2e encrypted chat request.  It can be senderKeyValidityExpired (new key to be provided in keyList, also new device key if there)  / receiverKeyValidationError / senderNewDeviceKeyAvailable (new device key to be provided in keyList,  also same device key if validity expired) / success 
 *
 * Values: senderKeyValidityExpiredComma,receiverKeyValidationError,senderNewDeviceKeyAvailable,success
 */

enum class SenderReturnCode(val value: kotlin.String) {

    @Json(name = "senderKeyValidityExpired,")
    senderKeyValidityExpiredComma("senderKeyValidityExpired,"),

    @Json(name = "receiverKeyValidationError")
    receiverKeyValidationError("receiverKeyValidationError"),

    @Json(name = "senderNewDeviceKeyAvailable")
    senderNewDeviceKeyAvailable("senderNewDeviceKeyAvailable"),

    @Json(name = "success")
    success("success");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is SenderReturnCode) "$data" else null

        /**
         * Returns a valid [SenderReturnCode] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): SenderReturnCode? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

