plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
    id "com.jfrog.artifactory" version "4.31.0"
}

def libraryVersion = '2.0.0'

android {
    namespace 'io.inappchat.inappchat'
    compileSdk 33

    defaultConfig {
        minSdk 21
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField 'String', "ENV", '"production"'
            buildConfigField 'String', 'BASE_URL', '"https://prov.inappchat.io"'
        }
        debug {
            debuggable true
            buildConfigField 'String', "ENV", '"dev"'
            buildConfigField 'String', 'BASE_URL', '"https://prov-dev.inappchat.io"'
        }
        qa {
            initWith debug
            buildConfigField 'String', "ENV", '"qa"'
            buildConfigField 'String', 'BASE_URL', '"https://prov-qa.inappchat.io"'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.2'
    implementation 'io.reactivex.rxjava3:rxjava:3.1.5'
    implementation 'com.jakewharton.rxrelay3:rxrelay:3.0.1'
    implementation 'com.jakewharton.rxbinding4:rxbinding:4.0.0'
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava3:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'
    implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.5'
    implementation 'org.apache.commons:commons-text:1.10.0'
    runtimeOnly 'org.jetbrains.kotlinx:kotlinx-coroutines-rx3:1.6.4'


    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.6.0'

    implementation 'com.google.android.material:material:1.7.0'

    implementation 'androidx.room:room-runtime:2.5.0'
    implementation 'androidx.room:room-rxjava3:2.5.0'
    annotationProcessor 'androidx.room:room-compiler:2.5.0'

    implementation platform('com.google.firebase:firebase-bom:31.2.0')
    implementation 'com.google.firebase:firebase-messaging-ktx'

    def paging_version = "3.1.1"
    implementation "androidx.paging:paging-runtime:$paging_version"
    testImplementation "androidx.paging:paging-common:$paging_version"
    implementation "androidx.paging:paging-rxjava3:$paging_version"
    implementation "androidx.paging:paging-compose:1.0.0-alpha17"

    implementation 'com.rollbar:rollbar-java:1.9.0'
    implementation 'com.rollbar:rollbar-android:1.9.0@aar'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}


publishing {
    publications {
        aar(MavenPublication) {
            groupId android.namespace
            version = libraryVersion
            artifactId project.getName()
            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/outputs/aar/${project.getName()}-${getFlavor(project)}-release.aar")
            pom.withXml {
                def dependencies = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    if (it.group != null && it.name != null && it.version != null && it.version != 'unspecified') {
                        def dependencyNode = dependencies.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }

                // include sub-module dependencies into POM xml file
                def submoduleDependencies = new XmlParser().parse("$projectDir/sub-module-dependencies.xml")
                submoduleDependencies.dependency.each {
                    def dependencyNode = dependencies.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.groupId.text())
                    dependencyNode.appendNode('artifactId', it.artifactId.text())
                    dependencyNode.appendNode('version', it.version.text())
                }
            }
        }
    }
}

private static String getFlavor(project) {
    def flavor = 'dev'
    if (project.hasProperty('paramEnv')) {
        flavor = project.property('paramEnv')
    }
    return flavor

}

def Properties properties = new Properties()
properties.load(project.rootProject.file("local.properties").newDataInputStream())

artifactory {
    contextUrl = properties.getProperty("context_url")
    publish {
        repository {
            // The Artifactory repository key to publish to
            repoKey = properties.getProperty("repoKey")
            username = properties.getProperty("artifactory_username")
            password = properties.getProperty("artifactory_password")
        }
        defaults {
            // Tell the Artifactory Plugin which artifacts should be published to Artifactory.
            publications('aar')
            publishArtifacts = true

            // Properties to be attached to the published artifacts.
            properties = ['qa.level': 'basic', 'dev.team': 'core']
            // Publish generated POM files to Artifactory (true by default)
            publishPom = true
        }
    }
}
